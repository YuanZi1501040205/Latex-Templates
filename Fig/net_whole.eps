%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: AGTBeatToneNetPaper.pdf
%%Creator: Adobe Acrobat 18.11.0
%%For: hglgh
%%CreationDate: 2018/3/29, 13:03:39
%%BoundingBox: 0 0 659 385
%%HiResBoundingBox: 0 0 658.5868 384.4260
%%CropBox: 0 0 658.5868 384.4260
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 922 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 84.159810, 2016/09/10-02:41:30        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2018-03-29T13:00:17-05:00"
   xmp:CreatorTool="Draw"
   xmp:ModifyDate="2018-03-29T13:01:14-05:00"
   xmp:MetadataDate="2018-03-29T13:01:14-05:00"
   pdf:Producer="OpenOffice 4.1.3"
   xmpMM:DocumentID="uuid:07ba37d5-c7ba-48d4-bea1-1aa75eb0952e"
   xmpMM:InstanceID="uuid:475d6825-3b36-4961-80b6-71de6f257e55">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>京 玉城</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 2 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -384.426 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
3.05176e-5 0 mo
3.05176e-5 384.426 li
658.587 384.426 li
658.587 0 li
cp
clp
2.292 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
116.194 2.146 mo
109.594 2.146 li
104.894 2.146 100.194 3.84595 96.094 6.646 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
.57174 .481575 .451972 0 cmyk
@
86.494 17.246 mo
84.694 20.646 83.594 24.3459 83.594 28.146 cv
83.594 31.146 li
@
83.594 45.546 mo
83.594 59.946 li
@
83.594 74.3459 mo
83.594 88.746 li
@
83.594 103.146 mo
83.594 117.546 li
@
83.594 131.946 mo
83.594 146.346 li
@
83.594 160.746 mo
83.594 175.146 li
@
83.594 189.546 mo
83.594 203.946 li
@
83.594 218.346 mo
83.594 232.746 li
@
83.594 247.146 mo
83.594 261.546 li
@
83.594 275.946 mo
83.594 290.346 li
@
83.594 304.746 mo
83.594 307.846 li
83.594 311.546 84.694 315.246 86.494 318.646 cv
@
95.994 329.346 mo
100.094 332.146 104.794 333.846 109.494 333.846 cv
@
123.894 333.846 mo
138.294 333.846 li
@
152.694 333.846 mo
167.094 333.846 li
@
181.494 333.846 mo
195.894 333.846 li
@
210.294 333.846 mo
213.594 333.846 li
217.194 333.846 220.894 332.846 224.294 331.046 cv
@
234.894 321.546 mo
237.694 317.446 239.494 312.846 239.594 308.146 cv
@
239.594 293.746 mo
239.594 279.346 li
@
239.594 264.946 mo
239.594 250.546 li
@
239.594 236.146 mo
239.594 221.746 li
@
239.594 207.346 mo
239.594 192.946 li
@
239.594 178.546 mo
239.594 164.146 li
@
239.594 149.746 mo
239.594 135.346 li
@
239.594 120.946 mo
239.594 106.546 li
@
239.594 92.146 mo
239.594 77.746 li
@
239.594 63.3459 mo
239.594 48.9459 li
@
239.594 34.546 mo
239.594 28.146 li
239.594 25.546 238.994 22.8461 238.094 20.3461 cv
@
229.794 8.74597 mo
225.994 5.54602 221.594 3.24597 216.894 2.44592 cv
@
202.594 2.146 mo
188.194 2.146 li
@
173.794 2.146 mo
159.394 2.146 li
@
144.994 2.146 mo
130.594 2.146 li
@
294.394 28.546 mo
298.394 28.546 301.494 31.646 301.494 35.646 cv
301.494 39.746 298.394 42.746 294.394 42.746 cv
290.394 42.746 287.294 39.746 287.294 35.646 cv
287.294 31.646 290.394 28.546 294.394 28.546 cv
cp
0 0 0 0 cmyk
ef
3 lw
294.394 28.546 mo
298.394 28.546 301.494 31.646 301.494 35.646 cv
301.494 39.746 298.394 42.746 294.394 42.746 cv
290.394 42.746 287.294 39.746 287.294 35.646 cv
287.294 31.646 290.394 28.546 294.394 28.546 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
294.394 56.946 mo
298.394 56.946 301.494 60.046 301.494 64.046 cv
301.494 68.046 298.394 71.146 294.394 71.146 cv
290.394 71.146 287.294 68.046 287.294 64.046 cv
287.294 60.046 290.394 56.946 294.394 56.946 cv
cp
0 0 0 0 cmyk
ef
294.394 56.946 mo
298.394 56.946 301.494 60.046 301.494 64.046 cv
301.494 68.046 298.394 71.146 294.394 71.146 cv
290.394 71.146 287.294 68.046 287.294 64.046 cv
287.294 60.046 290.394 56.946 294.394 56.946 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
294.394 85.246 mo
298.394 85.246 301.494 88.3459 301.494 92.3459 cv
301.494 96.3459 298.394 99.4459 294.394 99.4459 cv
290.394 99.4459 287.294 96.3459 287.294 92.3459 cv
287.294 88.3459 290.394 85.246 294.394 85.246 cv
cp
0 0 0 0 cmyk
ef
294.394 85.246 mo
298.394 85.246 301.494 88.3459 301.494 92.3459 cv
301.494 96.3459 298.394 99.4459 294.394 99.4459 cv
290.394 99.4459 287.294 96.3459 287.294 92.3459 cv
287.294 88.3459 290.394 85.246 294.394 85.246 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
331.194 14.446 mo
335.294 14.446 338.294 17.446 338.294 21.546 cv
338.294 25.546 335.294 28.546 331.194 28.546 cv
327.194 28.546 324.094 25.546 324.094 21.546 cv
324.094 17.446 327.194 14.446 331.194 14.446 cv
cp
0 0 0 0 cmyk
ef
331.194 14.446 mo
335.294 14.446 338.294 17.446 338.294 21.546 cv
338.294 25.546 335.294 28.546 331.194 28.546 cv
327.194 28.546 324.094 25.546 324.094 21.546 cv
324.094 17.446 327.194 14.446 331.194 14.446 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
331.194 42.746 mo
335.294 42.746 338.294 45.8459 338.294 49.8459 cv
338.294 53.8459 335.294 56.9459 331.194 56.9459 cv
327.194 56.9459 324.094 53.8459 324.094 49.8459 cv
324.094 45.8459 327.194 42.746 331.194 42.746 cv
cp
0 0 0 0 cmyk
ef
331.194 42.746 mo
335.294 42.746 338.294 45.8459 338.294 49.8459 cv
338.294 53.8459 335.294 56.9459 331.194 56.9459 cv
327.194 56.9459 324.094 53.8459 324.094 49.8459 cv
324.094 45.8459 327.194 42.746 331.194 42.746 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
331.194 71.146 mo
335.294 71.146 338.294 74.146 338.294 78.146 cv
338.294 82.246 335.294 85.246 331.194 85.246 cv
327.194 85.246 324.094 82.246 324.094 78.146 cv
324.094 74.146 327.194 71.146 331.194 71.146 cv
cp
0 0 0 0 cmyk
ef
331.194 71.146 mo
335.294 71.146 338.294 74.146 338.294 78.146 cv
338.294 82.246 335.294 85.246 331.194 85.246 cv
327.194 85.246 324.094 82.246 324.094 78.146 cv
324.094 74.146 327.194 71.146 331.194 71.146 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
331.194 99.446 mo
335.294 99.446 338.294 102.546 338.294 106.546 cv
338.294 110.546 335.294 113.646 331.194 113.646 cv
327.194 113.646 324.094 110.546 324.094 106.546 cv
324.094 102.546 327.194 99.446 331.194 99.446 cv
cp
0 0 0 0 cmyk
ef
331.194 99.446 mo
335.294 99.446 338.294 102.546 338.294 106.546 cv
338.294 110.546 335.294 113.646 331.194 113.646 cv
327.194 113.646 324.094 110.546 324.094 106.546 cv
324.094 102.546 327.194 99.446 331.194 99.446 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
365.194 42.746 mo
369.294 42.746 372.294 45.8459 372.294 49.8459 cv
372.294 53.8459 369.294 56.9459 365.194 56.9459 cv
361.194 56.9459 358.194 53.8459 358.194 49.8459 cv
358.194 45.8459 361.194 42.746 365.194 42.746 cv
cp
0 0 0 0 cmyk
ef
365.194 42.746 mo
369.294 42.746 372.294 45.8459 372.294 49.8459 cv
372.294 53.8459 369.294 56.9459 365.194 56.9459 cv
361.194 56.9459 358.194 53.8459 358.194 49.8459 cv
358.194 45.8459 361.194 42.746 365.194 42.746 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
365.194 71.146 mo
369.294 71.146 372.294 74.146 372.294 78.146 cv
372.294 82.246 369.294 85.246 365.194 85.246 cv
361.194 85.246 358.194 82.246 358.194 78.146 cv
358.194 74.146 361.194 71.146 365.194 71.146 cv
cp
0 0 0 0 cmyk
ef
365.194 71.146 mo
369.294 71.146 372.294 74.146 372.294 78.146 cv
372.294 82.246 369.294 85.246 365.194 85.246 cv
361.194 85.246 358.194 82.246 358.194 78.146 cv
358.194 74.146 361.194 71.146 365.194 71.146 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
.99 lw
301.494 35.646 mo
324.094 21.546 li
@
2.292 lw
301.494 35.646 mo
324.094 49.8459 li
@
0 lw
301.494 35.646 mo
324.094 78.146 li
@
301.494 35.646 mo
324.094 106.546 li
@
1.5 lw
301.494 64.046 mo
324.094 21.546 li
@
2.292 lw
301.494 64.046 mo
324.094 49.8461 li
@
299.394 69.046 mo
324.094 78.146 li
@
301.494 64.046 mo
324.094 106.546 li
@
1.5 lw
301.494 92.3459 mo
324.094 21.5459 li
@
0 lw
301.494 92.3459 mo
324.094 49.8459 li
@
301.494 92.3459 mo
324.094 78.146 li
@
301.494 92.3459 mo
324.094 106.546 li
@
1.5 lw
338.294 21.546 mo
358.194 49.8461 li
@
.99 lw
338.294 49.8459 mo
358.194 49.8459 li
@
0 lw
338.294 78.146 mo
358.194 49.8459 li
@
.99 lw
338.294 106.546 mo
358.194 49.8461 li
@
1.5 lw
338.294 78.146 mo
358.194 78.146 li
@
0 lw
338.294 106.546 mo
358.194 78.146 li
@
338.294 49.8459 mo
358.194 78.146 li
@
2.292 lw
338.294 21.546 mo
358.194 78.146 li
@
gsave
28.894 124.546 mo
28.894 124.346 li
28.894 124.046 li
28.994 123.746 li
29.094 123.446 li
29.294 123.146 li
29.494 122.846 li
29.894 122.346 li
30.494 121.746 li
31.194 121.146 li
31.994 120.746 li
32.894 120.346 li
33.894 119.946 li
34.894 119.546 li
35.994 119.146 li
37.194 118.946 li
38.294 118.746 li
39.594 118.546 li
40.894 118.446 li
41.994 118.446 li
43.294 118.446 li
44.494 118.546 li
45.694 118.746 li
46.894 118.946 li
47.994 119.146 li
49.094 119.546 li
50.194 119.946 li
51.094 120.346 li
51.994 120.746 li
52.894 121.146 li
53.494 121.746 li
54.094 122.346 li
54.594 122.846 li
54.894 123.146 li
54.894 123.446 li
55.094 123.746 li
55.194 124.046 li
55.194 124.346 li
55.294 124.546 li
55.294 151.446 li
55.194 151.646 li
55.194 151.946 li
55.094 152.146 li
54.894 152.546 li
54.894 152.846 li
54.594 153.146 li
54.094 153.646 li
53.494 154.146 li
52.894 154.746 li
51.994 155.146 li
51.094 155.646 li
50.194 156.046 li
49.094 156.446 li
47.994 156.746 li
46.894 157.046 li
45.694 157.146 li
44.494 157.446 li
43.294 157.546 li
41.994 157.546 li
40.894 157.546 li
39.594 157.446 li
38.294 157.146 li
37.194 157.046 li
35.994 156.746 li
34.894 156.446 li
33.894 156.046 li
32.894 155.646 li
31.994 155.146 li
31.194 154.746 li
30.494 154.146 li
29.894 153.646 li
29.494 153.146 li
29.294 152.846 li
29.094 152.546 li
28.994 152.146 li
28.894 151.946 li
28.894 151.646 li
28.894 151.446 li
28.894 124.546 li
cp
eclp
28.694 157.546 mo
28.794 118.246 li
29.094 118.246 li
29.094 157.546 li
cp
.273503 0 .280705 0 cmyk
ef
54.994 157.546 mo
55.094 118.346 li
55.394 118.346 li
55.394 157.546 li
cp
ef
29.094 157.546 mo
29.094 118.246 li
29.494 118.246 li
29.394 157.546 li
cp
.269963 0 .280308 0 cmyk
ef
54.694 157.546 mo
54.694 118.346 li
55.094 118.346 li
54.994 157.546 li
cp
ef
29.394 157.546 mo
29.494 118.246 li
29.794 118.246 li
29.694 157.546 li
cp
.265965 0 .275029 0 cmyk
ef
54.294 157.546 mo
54.394 118.346 li
54.694 118.346 li
54.694 157.546 li
cp
ef
29.694 157.546 mo
29.794 118.246 li
30.094 118.246 li
30.094 157.546 li
cp
.262242 0 .271885 0 cmyk
ef
53.994 157.546 mo
54.094 118.346 li
54.394 118.346 li
54.294 157.546 li
cp
ef
30.094 157.546 mo
30.094 118.246 li
30.394 118.246 li
30.394 157.546 li
cp
.257816 0 .266728 0 cmyk
ef
53.694 157.546 mo
53.694 118.346 li
54.094 118.346 li
53.994 157.546 li
cp
ef
30.394 157.546 mo
30.394 118.246 li
30.794 118.246 li
30.694 157.546 li
cp
.253483 0 .260929 0 cmyk
ef
53.394 157.546 mo
53.394 118.346 li
53.694 118.346 li
53.694 157.546 li
cp
ef
30.694 157.546 mo
30.794 118.246 li
31.094 118.246 li
31.094 157.546 li
cp
.248692 0 .257237 0 cmyk
ef
52.994 157.546 mo
53.094 118.346 li
53.394 118.346 li
53.394 157.546 li
cp
ef
31.094 157.546 mo
31.094 118.246 li
31.494 118.246 li
31.394 157.546 li
cp
.244236 0 .251469 0 cmyk
ef
52.694 157.546 mo
52.794 118.346 li
53.094 118.346 li
52.994 157.546 li
cp
ef
31.394 157.546 mo
31.494 118.246 li
31.794 118.246 li
31.694 157.546 li
cp
.23975 0 .247807 0 cmyk
ef
52.394 157.546 mo
52.394 118.346 li
52.794 118.346 li
52.694 157.546 li
cp
ef
31.694 157.546 mo
31.794 118.246 li
32.094 118.246 li
32.094 157.546 li
cp
.235843 0 .24213 0 cmyk
ef
51.994 157.546 mo
52.094 118.346 li
52.394 118.346 li
52.394 157.546 li
cp
ef
32.094 157.546 mo
32.094 118.246 li
32.494 118.246 li
32.394 157.546 li
cp
.232029 0 .236851 0 cmyk
ef
51.694 157.546 mo
51.694 118.346 li
52.094 118.346 li
51.994 157.546 li
cp
ef
32.394 157.546 mo
32.494 118.246 li
32.794 118.246 li
32.694 157.546 li
cp
.227543 0 .233005 0 cmyk
ef
51.394 157.546 mo
51.394 118.346 li
51.694 118.346 li
51.694 157.546 li
cp
ef
32.694 157.546 mo
32.794 118.246 li
33.094 118.246 li
33.094 157.546 li
cp
.223545 0 .228428 0 cmyk
ef
50.994 157.546 mo
51.094 118.346 li
51.394 118.346 li
51.394 157.546 li
cp
ef
33.094 157.546 mo
33.094 118.246 li
33.494 118.246 li
33.394 157.546 li
cp
.219211 0 .224491 0 cmyk
ef
50.694 157.546 mo
50.694 118.346 li
51.094 118.346 li
50.994 157.546 li
cp
ef
33.394 157.546 mo
33.494 118.246 li
33.794 118.246 li
33.694 157.546 li
cp
.215702 0 .223941 0 cmyk
ef
50.294 157.546 mo
50.394 118.346 li
50.694 118.346 li
50.694 157.546 li
cp
ef
33.694 157.546 mo
33.794 118.246 li
34.094 118.346 li
34.094 157.546 li
cp
.211887 0 .218326 0 cmyk
ef
49.994 157.546 mo
50.094 118.346 li
50.394 118.346 li
50.294 157.546 li
cp
ef
34.094 157.546 mo
34.094 118.346 li
34.394 118.346 li
34.394 157.546 li
cp
.208194 0 .214969 0 cmyk
ef
49.694 157.546 mo
49.794 118.346 li
50.094 118.346 li
49.994 157.546 li
cp
ef
34.394 157.546 mo
34.394 118.346 li
34.794 118.346 li
34.694 157.546 li
cp
.203861 0 .20914 0 cmyk
ef
49.394 157.546 mo
49.394 118.346 li
49.794 118.346 li
49.694 157.546 li
cp
ef
34.694 157.546 mo
34.794 118.346 li
35.094 118.346 li
35.094 157.546 li
cp
.199466 0 .202976 0 cmyk
ef
48.994 157.546 mo
49.094 118.346 li
49.394 118.346 li
49.394 157.546 li
cp
ef
35.094 157.546 mo
35.094 118.346 li
35.494 118.346 li
35.394 157.546 li
cp
.194766 0 .199222 0 cmyk
ef
48.694 157.546 mo
48.794 118.346 li
49.094 118.346 li
48.994 157.546 li
cp
ef
35.394 157.546 mo
35.494 118.346 li
35.794 118.346 li
35.694 157.546 li
cp
.190097 0 .19324 0 cmyk
ef
48.394 157.546 mo
48.394 118.346 li
48.794 118.346 li
48.694 157.546 li
cp
ef
35.694 157.546 mo
35.794 118.346 li
36.094 118.346 li
36.094 157.546 li
cp
.18558 0 .189456 0 cmyk
ef
47.994 157.546 mo
48.094 118.346 li
48.394 118.346 li
48.394 157.546 li
cp
ef
36.094 157.546 mo
36.094 118.346 li
36.494 118.346 li
36.394 157.546 li
cp
.181369 0 .184024 0 cmyk
ef
47.694 157.546 mo
47.694 118.346 li
48.094 118.346 li
47.994 157.546 li
cp
ef
36.394 157.546 mo
36.494 118.346 li
36.794 118.346 li
36.694 157.546 li
cp
.176822 0 .178927 0 cmyk
ef
47.394 157.546 mo
47.394 118.346 li
47.694 118.346 li
47.694 157.546 li
cp
ef
36.694 157.546 mo
36.794 118.346 li
37.094 118.346 li
37.094 157.546 li
cp
.172122 0 .175479 0 cmyk
ef
46.994 157.546 mo
47.094 118.346 li
47.394 118.346 li
47.394 157.546 li
cp
ef
37.094 157.546 mo
37.094 118.346 li
37.394 118.346 li
37.394 157.546 li
cp
.167727 0 .171023 0 cmyk
ef
46.694 157.546 mo
46.694 118.346 li
47.094 118.346 li
46.994 157.546 li
cp
ef
37.394 157.546 mo
37.394 118.346 li
37.794 118.346 li
37.694 157.546 li
cp
.163485 0 .167544 0 cmyk
ef
46.294 157.546 mo
46.394 118.346 li
46.694 118.346 li
46.694 157.546 li
cp
ef
37.694 157.546 mo
37.794 118.346 li
38.094 118.346 li
38.094 157.546 li
cp
.159762 0 .166903 0 cmyk
ef
45.994 157.546 mo
46.094 118.346 li
46.394 118.346 li
46.294 157.546 li
cp
ef
38.094 157.546 mo
38.094 118.346 li
38.394 118.346 li
38.394 157.546 li
cp
.15671 0 .16199 0 cmyk
ef
45.694 157.546 mo
45.794 118.346 li
46.094 118.346 li
45.994 157.546 li
cp
ef
38.394 157.546 mo
38.394 118.346 li
38.794 118.346 li
38.694 157.546 li
cp
.15198 0 .158785 0 cmyk
ef
45.394 157.546 mo
45.394 118.346 li
45.794 118.346 li
45.694 157.546 li
cp
ef
38.694 157.546 mo
38.794 118.346 li
39.094 118.346 li
39.094 157.546 li
cp
.147494 0 .153017 0 cmyk
ef
44.994 157.546 mo
45.094 118.346 li
45.394 118.346 li
45.394 157.546 li
cp
ef
39.094 157.546 mo
39.094 118.346 li
39.494 118.346 li
39.394 157.546 li
cp
.143069 0 .146975 0 cmyk
ef
44.694 157.546 mo
44.794 118.346 li
45.094 118.346 li
44.994 157.546 li
cp
ef
39.394 157.546 mo
39.494 118.346 li
39.794 118.346 li
39.694 157.546 li
cp
.138125 0 .142977 0 cmyk
ef
44.394 157.546 mo
44.394 118.346 li
44.794 118.346 li
44.694 157.546 li
cp
ef
39.694 157.546 mo
39.794 118.346 li
40.094 118.346 li
40.094 157.546 li
cp
.133516 0 .136843 0 cmyk
ef
43.994 157.546 mo
44.094 118.346 li
44.394 118.346 li
44.394 157.546 li
cp
ef
40.094 157.546 mo
40.094 118.346 li
40.494 118.346 li
40.394 157.546 li
cp
.128756 0 .132662 0 cmyk
ef
43.694 157.546 mo
43.694 118.346 li
44.094 118.346 li
43.994 157.546 li
cp
ef
40.394 157.546 mo
40.494 118.346 li
40.794 118.346 li
40.694 157.546 li
cp
.124544 0 .127016 0 cmyk
ef
43.394 157.546 mo
43.394 118.346 li
43.694 118.346 li
43.694 157.546 li
cp
ef
40.694 157.546 mo
40.794 118.346 li
41.094 118.346 li
40.994 157.546 li
cp
.119936 0 .121096 0 cmyk
ef
42.994 157.546 mo
43.094 118.346 li
43.394 118.346 li
43.394 157.546 li
cp
ef
40.994 157.546 mo
41.094 118.346 li
41.394 118.346 li
41.394 157.546 li
cp
.113588 0 .115938 0 cmyk
ef
42.694 157.546 mo
42.694 118.346 li
43.094 118.346 li
42.994 157.546 li
cp
ef
41.394 157.546 mo
41.394 118.346 li
41.794 118.346 li
41.694 157.546 li
cp
.108553 0 .109529 0 cmyk
ef
42.394 157.546 mo
42.394 118.346 li
42.694 118.346 li
42.694 157.546 li
cp
ef
41.694 157.546 mo
41.794 118.346 li
42.394 118.346 li
42.394 157.546 li
cp
.0977188 0 .105287 0 cmyk
ef
grestore
1.132 lw
28.894 124.546 mo
28.894 121.446 35.494 118.346 42.094 118.346 cv
48.694 118.346 55.294 121.446 55.294 124.546 cv
55.294 151.346 li
55.294 154.446 48.694 157.546 42.094 157.546 cv
35.494 157.546 28.894 154.446 28.894 151.346 cv
28.894 124.546 li
cp
@
gsave
28.894 124.546 mo
55.294 124.546 li
55.194 124.846 li
55.194 125.146 li
55.094 125.446 li
54.894 125.746 li
54.894 126.046 li
54.594 126.146 li
54.094 126.846 li
53.494 127.346 li
52.894 127.846 li
51.994 128.346 li
51.094 128.846 li
50.194 129.146 li
49.094 129.646 li
47.994 129.946 li
46.894 130.146 li
45.694 130.446 li
44.494 130.646 li
43.294 130.746 li
41.994 130.746 li
40.894 130.746 li
39.594 130.646 li
38.294 130.446 li
37.194 130.146 li
35.994 129.946 li
34.894 129.646 li
33.894 129.146 li
32.894 128.846 li
31.994 128.346 li
31.194 127.846 li
30.494 127.346 li
29.894 126.846 li
29.494 126.146 li
29.294 126.046 li
29.094 125.746 li
28.994 125.446 li
28.894 125.146 li
28.894 124.846 li
28.894 124.546 li
cp
eclp
28.794 130.746 mo
28.794 124.446 li
29.094 124.446 li
29.094 130.746 li
cp
.273503 0 .280705 0 cmyk
ef
54.994 130.746 mo
54.994 124.446 li
55.294 124.446 li
55.294 130.746 li
cp
ef
29.094 130.746 mo
29.094 124.446 li
29.494 124.446 li
29.494 130.746 li
cp
.269963 0 .280308 0 cmyk
ef
54.694 130.746 mo
54.694 124.446 li
54.994 124.446 li
54.994 130.746 li
cp
ef
29.494 130.746 mo
29.494 124.446 li
29.794 124.446 li
29.794 130.746 li
cp
.265965 0 .275029 0 cmyk
ef
54.294 130.746 mo
54.294 124.446 li
54.694 124.446 li
54.694 130.746 li
cp
ef
29.794 130.746 mo
29.794 124.446 li
30.094 124.446 li
30.094 130.746 li
cp
.262242 0 .271885 0 cmyk
ef
53.994 130.746 mo
53.994 124.446 li
54.294 124.446 li
54.294 130.746 li
cp
ef
30.094 130.746 mo
30.094 124.446 li
30.494 124.446 li
30.494 130.746 li
cp
.257816 0 .266728 0 cmyk
ef
53.694 130.746 mo
53.694 124.446 li
53.994 124.446 li
53.994 130.746 li
cp
ef
30.494 130.746 mo
30.494 124.446 li
30.794 124.446 li
30.794 130.746 li
cp
.253483 0 .260929 0 cmyk
ef
53.294 130.746 mo
53.294 124.446 li
53.694 124.446 li
53.694 130.746 li
cp
ef
30.794 130.746 mo
30.794 124.446 li
31.094 124.446 li
31.094 130.746 li
cp
.248692 0 .257237 0 cmyk
ef
52.994 130.746 mo
52.994 124.446 li
53.294 124.446 li
53.294 130.746 li
cp
ef
31.094 130.746 mo
31.094 124.446 li
31.494 124.446 li
31.494 130.746 li
cp
.244236 0 .251469 0 cmyk
ef
52.694 130.746 mo
52.694 124.446 li
52.994 124.446 li
52.994 130.746 li
cp
ef
31.494 130.746 mo
31.494 124.446 li
31.794 124.446 li
31.794 130.746 li
cp
.23975 0 .247807 0 cmyk
ef
52.294 130.746 mo
52.294 124.446 li
52.694 124.446 li
52.694 130.746 li
cp
ef
31.794 130.746 mo
31.794 124.446 li
32.094 124.446 li
32.094 130.746 li
cp
.235843 0 .24213 0 cmyk
ef
51.994 130.746 mo
51.994 124.446 li
52.294 124.446 li
52.294 130.746 li
cp
ef
32.094 130.746 mo
32.094 124.446 li
32.494 124.446 li
32.494 130.746 li
cp
.232029 0 .236851 0 cmyk
ef
51.694 130.746 mo
51.694 124.446 li
51.994 124.446 li
51.994 130.746 li
cp
ef
32.494 130.746 mo
32.494 124.446 li
32.794 124.446 li
32.794 130.746 li
cp
.227543 0 .233005 0 cmyk
ef
51.294 130.746 mo
51.294 124.446 li
51.694 124.446 li
51.694 130.746 li
cp
ef
32.794 130.746 mo
32.794 124.446 li
33.094 124.446 li
33.094 130.746 li
cp
.223545 0 .228428 0 cmyk
ef
50.994 130.746 mo
50.994 124.446 li
51.294 124.446 li
51.294 130.746 li
cp
ef
33.094 130.746 mo
33.094 124.446 li
33.494 124.446 li
33.494 130.746 li
cp
.219211 0 .224491 0 cmyk
ef
50.694 130.746 mo
50.694 124.446 li
50.994 124.446 li
50.994 130.746 li
cp
ef
33.494 130.746 mo
33.494 124.446 li
33.794 124.446 li
33.794 130.746 li
cp
.215702 0 .223941 0 cmyk
ef
50.294 130.746 mo
50.294 124.446 li
50.694 124.446 li
50.694 130.746 li
cp
ef
33.794 130.746 mo
33.794 124.446 li
34.094 124.446 li
34.094 130.746 li
cp
.211887 0 .218326 0 cmyk
ef
49.994 130.746 mo
49.994 124.446 li
50.294 124.446 li
50.294 130.746 li
cp
ef
34.094 130.746 mo
34.094 124.446 li
34.394 124.446 li
34.394 130.746 li
cp
.208194 0 .214969 0 cmyk
ef
49.694 130.746 mo
49.694 124.446 li
49.994 124.446 li
49.994 130.746 li
cp
ef
34.394 130.746 mo
34.394 124.446 li
34.794 124.446 li
34.794 130.746 li
cp
.203861 0 .20914 0 cmyk
ef
49.394 130.746 mo
49.394 124.446 li
49.694 124.446 li
49.694 130.746 li
cp
ef
34.794 130.746 mo
34.794 124.446 li
35.094 124.446 li
35.094 130.746 li
cp
.199466 0 .202976 0 cmyk
ef
48.994 130.746 mo
48.994 124.446 li
49.394 124.446 li
49.394 130.746 li
cp
ef
35.094 130.746 mo
35.094 124.446 li
35.494 124.446 li
35.494 130.746 li
cp
.194766 0 .199222 0 cmyk
ef
48.694 130.746 mo
48.694 124.446 li
48.994 124.446 li
48.994 130.746 li
cp
ef
35.494 130.746 mo
35.494 124.446 li
35.794 124.446 li
35.794 130.746 li
cp
.190097 0 .19324 0 cmyk
ef
48.394 130.746 mo
48.394 124.446 li
48.694 124.446 li
48.694 130.746 li
cp
ef
35.794 130.746 mo
35.794 124.446 li
36.094 124.446 li
36.094 130.746 li
cp
.18558 0 .189456 0 cmyk
ef
47.994 130.746 mo
47.994 124.446 li
48.394 124.446 li
48.394 130.746 li
cp
ef
36.094 130.746 mo
36.094 124.446 li
36.494 124.446 li
36.494 130.746 li
cp
.181369 0 .184024 0 cmyk
ef
47.694 130.746 mo
47.694 124.446 li
47.994 124.446 li
47.994 130.746 li
cp
ef
36.494 130.746 mo
36.494 124.446 li
36.794 124.446 li
36.794 130.746 li
cp
.176822 0 .178927 0 cmyk
ef
47.394 130.746 mo
47.394 124.446 li
47.694 124.446 li
47.694 130.746 li
cp
ef
36.794 130.746 mo
36.794 124.446 li
37.094 124.446 li
37.094 130.746 li
cp
.172122 0 .175479 0 cmyk
ef
46.994 130.746 mo
46.994 124.446 li
47.394 124.446 li
47.394 130.746 li
cp
ef
37.094 130.746 mo
37.094 124.446 li
37.394 124.446 li
37.394 130.746 li
cp
.167727 0 .171023 0 cmyk
ef
46.694 130.746 mo
46.694 124.446 li
46.994 124.446 li
46.994 130.746 li
cp
ef
37.394 130.746 mo
37.394 124.446 li
37.794 124.446 li
37.794 130.746 li
cp
.163485 0 .167544 0 cmyk
ef
46.394 130.746 mo
46.394 124.446 li
46.694 124.446 li
46.694 130.746 li
cp
ef
37.794 130.746 mo
37.794 124.446 li
38.094 124.446 li
38.094 130.746 li
cp
.159762 0 .166903 0 cmyk
ef
45.994 130.746 mo
45.994 124.446 li
46.394 124.446 li
46.394 130.746 li
cp
ef
38.094 130.746 mo
38.094 124.446 li
38.394 124.446 li
38.394 130.746 li
cp
.15671 0 .16199 0 cmyk
ef
45.694 130.746 mo
45.694 124.446 li
45.994 124.446 li
45.994 130.746 li
cp
ef
38.394 130.746 mo
38.394 124.446 li
38.794 124.446 li
38.794 130.746 li
cp
.15198 0 .158785 0 cmyk
ef
45.394 130.746 mo
45.394 124.446 li
45.694 124.446 li
45.694 130.746 li
cp
ef
38.794 130.746 mo
38.794 124.446 li
39.094 124.446 li
39.094 130.746 li
cp
.147494 0 .153017 0 cmyk
ef
44.994 130.746 mo
44.994 124.446 li
45.394 124.446 li
45.394 130.746 li
cp
ef
39.094 130.746 mo
39.094 124.446 li
39.394 124.446 li
39.394 130.746 li
cp
.143069 0 .146975 0 cmyk
ef
44.694 130.746 mo
44.694 124.446 li
44.994 124.446 li
44.994 130.746 li
cp
ef
39.394 130.746 mo
39.394 124.446 li
39.794 124.446 li
39.794 130.746 li
cp
.138125 0 .142977 0 cmyk
ef
44.394 130.746 mo
44.394 124.446 li
44.694 124.446 li
44.694 130.746 li
cp
ef
39.794 130.746 mo
39.794 124.446 li
40.094 124.446 li
40.094 130.746 li
cp
.133516 0 .136843 0 cmyk
ef
44.094 130.746 mo
44.094 124.446 li
44.394 124.446 li
44.394 130.746 li
cp
ef
40.094 130.746 mo
40.094 124.446 li
40.394 124.446 li
40.394 130.746 li
cp
.128756 0 .132662 0 cmyk
ef
43.694 130.746 mo
43.694 124.446 li
44.094 124.446 li
44.094 130.746 li
cp
ef
40.394 130.746 mo
40.394 124.446 li
40.794 124.446 li
40.794 130.746 li
cp
.124544 0 .127016 0 cmyk
ef
43.394 130.746 mo
43.394 124.446 li
43.694 124.446 li
43.694 130.746 li
cp
ef
40.794 130.746 mo
40.794 124.446 li
41.094 124.446 li
41.094 130.746 li
cp
.119936 0 .121096 0 cmyk
ef
43.094 130.746 mo
43.094 124.446 li
43.394 124.446 li
43.394 130.746 li
cp
ef
41.094 130.746 mo
41.094 124.446 li
41.394 124.446 li
41.394 130.746 li
cp
.113588 0 .115938 0 cmyk
ef
42.694 130.746 mo
42.694 124.446 li
43.094 124.446 li
43.094 130.746 li
cp
ef
41.394 130.746 mo
41.394 124.446 li
41.794 124.446 li
41.794 130.746 li
cp
.108553 0 .109529 0 cmyk
ef
42.394 130.746 mo
42.394 124.446 li
42.694 124.446 li
42.694 130.746 li
cp
ef
41.794 130.746 mo
41.794 124.446 li
42.394 124.446 li
42.394 130.746 li
cp
.0977188 0 .105287 0 cmyk
ef
grestore
28.894 124.546 mo
28.894 127.646 35.494 130.646 42.094 130.646 cv
48.694 130.646 55.294 127.646 55.294 124.546 cv
@
gsave
41.994 118.446 mo
44.694 118.546 li
47.194 118.846 li
48.394 119.146 li
49.494 119.446 li
50.494 119.846 li
51.394 120.146 li
52.294 120.646 li
52.994 121.146 li
53.694 121.546 li
54.194 122.146 li
54.694 122.746 li
54.894 123.046 li
54.994 123.346 li
55.094 123.646 li
55.194 123.946 li
55.194 124.146 li
55.194 124.546 li
55.194 124.946 li
55.194 125.146 li
55.094 125.546 li
54.994 125.846 li
54.894 126.146 li
54.694 126.446 li
54.194 127.046 li
53.694 127.646 li
52.994 128.146 li
52.294 128.546 li
51.394 129.046 li
50.494 129.446 li
49.494 129.746 li
48.394 130.046 li
47.194 130.346 li
44.694 130.646 li
41.994 130.846 li
39.294 130.646 li
36.894 130.346 li
35.594 130.046 li
34.594 129.746 li
33.494 129.446 li
32.594 129.046 li
31.894 128.546 li
30.994 128.146 li
30.394 127.646 li
29.894 127.046 li
29.394 126.446 li
29.194 126.146 li
29.094 125.846 li
28.994 125.546 li
28.894 125.146 li
28.894 124.946 li
28.894 124.546 li
28.894 124.146 li
28.894 123.946 li
28.994 123.646 li
29.094 123.346 li
29.194 123.046 li
29.394 122.746 li
29.894 122.146 li
30.394 121.546 li
30.994 121.146 li
31.894 120.646 li
32.594 120.146 li
33.494 119.846 li
34.594 119.446 li
35.594 119.146 li
36.894 118.846 li
39.294 118.546 li
41.994 118.446 li
cp
eclp
28.794 118.346 mo
55.294 118.346 li
55.294 119.546 li
28.794 119.546 li
cp
.273503 0 .280705 0 cmyk
ef
28.794 119.546 mo
55.294 119.546 li
55.294 119.846 li
28.794 119.846 li
cp
ef
28.794 119.846 mo
55.294 119.846 li
55.294 120.146 li
28.794 120.146 li
cp
.269963 0 .280308 0 cmyk
ef
28.794 120.146 mo
55.294 120.146 li
55.294 120.446 li
28.794 120.446 li
cp
.265965 0 .275029 0 cmyk
ef
28.794 120.446 mo
55.294 120.446 li
55.294 120.746 li
28.794 120.746 li
cp
.262242 0 .271885 0 cmyk
ef
28.794 120.746 mo
55.294 120.746 li
55.294 121.046 li
28.794 121.046 li
cp
.257816 0 .266728 0 cmyk
ef
28.794 121.046 mo
55.294 121.046 li
55.294 121.246 li
28.794 121.246 li
cp
.253483 0 .260929 0 cmyk
ef
28.794 121.246 mo
55.294 121.246 li
55.294 121.546 li
28.794 121.546 li
cp
.248692 0 .257237 0 cmyk
ef
28.794 121.546 mo
55.294 121.546 li
55.294 121.846 li
28.794 121.846 li
cp
.244236 0 .251469 0 cmyk
ef
28.794 121.846 mo
55.294 121.846 li
55.294 122.146 li
28.794 122.146 li
cp
.23975 0 .247807 0 cmyk
ef
28.794 122.146 mo
55.294 122.146 li
55.294 122.446 li
28.794 122.446 li
cp
.235843 0 .24213 0 cmyk
ef
28.794 122.446 mo
55.294 122.446 li
55.294 122.746 li
28.794 122.746 li
cp
.232029 0 .236851 0 cmyk
ef
28.794 122.746 mo
55.294 122.746 li
55.294 123.046 li
28.794 123.046 li
cp
.227543 0 .233005 0 cmyk
ef
28.794 123.046 mo
55.294 123.046 li
55.294 123.346 li
28.794 123.346 li
cp
.223545 0 .228428 0 cmyk
ef
28.794 123.346 mo
55.294 123.346 li
55.294 123.646 li
28.794 123.646 li
cp
.219211 0 .224491 0 cmyk
ef
28.794 123.646 mo
55.294 123.646 li
55.294 123.846 li
28.794 123.846 li
cp
.215641 0 .218753 0 cmyk
ef
28.794 123.846 mo
55.294 123.846 li
55.294 124.146 li
28.794 124.146 li
cp
.211704 0 .213291 0 cmyk
ef
28.794 124.146 mo
55.294 124.146 li
55.294 124.446 li
28.794 124.446 li
cp
.208011 0 .209628 0 cmyk
ef
28.794 124.446 mo
55.294 124.446 li
55.294 124.746 li
28.794 124.746 li
cp
.203555 0 .203464 0 cmyk
ef
28.794 124.746 mo
55.294 124.746 li
55.294 125.046 li
28.794 125.046 li
cp
.198886 0 .19971 0 cmyk
ef
28.794 125.046 mo
55.294 125.046 li
55.294 125.346 li
28.794 125.346 li
cp
.190097 0 .19324 0 cmyk
ef
28.794 125.346 mo
55.294 125.346 li
55.294 125.646 li
28.794 125.646 li
cp
.186069 0 .192691 0 cmyk
ef
28.794 125.646 mo
55.294 125.646 li
55.294 125.946 li
28.794 125.946 li
cp
.181888 0 .188937 0 cmyk
ef
28.794 125.946 mo
55.294 125.946 li
55.294 126.146 li
28.794 126.146 li
cp
.177523 0 .183536 0 cmyk
ef
28.794 126.146 mo
55.294 126.146 li
55.294 126.446 li
28.794 126.446 li
cp
.172854 0 .180301 0 cmyk
ef
28.794 126.446 mo
55.294 126.446 li
55.294 126.746 li
28.794 126.746 li
cp
.168032 0 .174899 0 cmyk
ef
28.794 126.746 mo
55.294 126.746 li
55.294 127.046 li
28.794 127.046 li
cp
.163882 0 .170352 0 cmyk
ef
28.794 127.046 mo
55.294 127.046 li
55.294 127.346 li
28.794 127.346 li
cp
.159762 0 .166903 0 cmyk
ef
28.794 127.346 mo
55.294 127.346 li
55.294 127.646 li
28.794 127.646 li
cp
.15671 0 .16199 0 cmyk
ef
28.794 127.646 mo
55.294 127.646 li
55.294 127.946 li
28.794 127.946 li
cp
.15198 0 .158785 0 cmyk
ef
28.794 127.946 mo
55.294 127.946 li
55.294 128.246 li
28.794 128.246 li
cp
.147494 0 .153017 0 cmyk
ef
28.794 128.246 mo
55.294 128.246 li
55.294 128.446 li
28.794 128.446 li
cp
.143069 0 .146975 0 cmyk
ef
28.794 128.446 mo
55.294 128.446 li
55.294 128.746 li
28.794 128.746 li
cp
.138125 0 .142977 0 cmyk
ef
28.794 128.746 mo
55.294 128.746 li
55.294 129.046 li
28.794 129.046 li
cp
.133516 0 .136843 0 cmyk
ef
28.794 129.046 mo
55.294 129.046 li
55.294 129.346 li
28.794 129.346 li
cp
.128756 0 .132662 0 cmyk
ef
28.794 129.346 mo
55.294 129.346 li
55.294 129.646 li
28.794 129.646 li
cp
.124544 0 .127016 0 cmyk
ef
28.794 129.646 mo
55.294 129.646 li
55.294 129.946 li
28.794 129.946 li
cp
.119936 0 .121096 0 cmyk
ef
28.794 129.946 mo
55.294 129.946 li
55.294 130.246 li
28.794 130.246 li
cp
.113588 0 .115938 0 cmyk
ef
28.794 130.246 mo
55.294 130.246 li
55.294 130.446 li
28.794 130.446 li
cp
.108553 0 .109529 0 cmyk
ef
28.794 130.446 mo
55.294 130.446 li
55.294 130.846 li
28.794 130.846 li
cp
.0977188 0 .105287 0 cmyk
ef
grestore
42.094 118.346 mo
49.594 118.346 55.294 121.046 55.294 124.546 cv
55.294 128.046 49.594 130.746 42.094 130.746 cv
34.594 130.746 28.894 128.046 28.894 124.546 cv
28.894 121.046 34.594 118.346 42.094 118.346 cv
cp
@
gsave
150.694 50.8459 mo
150.694 50.646 li
150.894 50.3459 li
150.894 50.046 li
150.994 49.746 li
151.194 49.446 li
151.394 49.146 li
151.894 48.646 li
152.394 48.046 li
153.094 47.546 li
153.894 47.046 li
154.894 46.646 li
155.894 46.146 li
156.894 45.8459 li
157.894 45.546 li
159.094 45.146 li
160.194 45.046 li
161.394 44.8459 li
162.694 44.746 li
163.894 44.746 li
165.194 44.746 li
166.394 44.8459 li
167.594 45.046 li
168.894 45.146 li
169.894 45.546 li
170.994 45.8459 li
171.994 46.146 li
172.994 46.646 li
173.894 47.046 li
174.694 47.546 li
175.394 48.046 li
175.994 48.646 li
176.494 49.146 li
176.694 49.446 li
176.894 49.746 li
176.994 50.046 li
177.094 50.3459 li
177.094 50.646 li
177.094 50.8459 li
177.094 77.746 li
177.094 77.946 li
177.094 78.146 li
176.994 78.546 li
176.894 78.8459 li
176.694 79.146 li
176.494 79.446 li
175.994 79.946 li
175.394 80.546 li
174.694 81.046 li
173.894 81.546 li
172.994 81.946 li
171.994 82.3459 li
170.994 82.746 li
169.894 83.046 li
168.894 83.3459 li
167.594 83.546 li
166.394 83.746 li
165.194 83.8459 li
163.894 83.8459 li
162.694 83.8459 li
161.394 83.746 li
160.194 83.546 li
159.094 83.3459 li
157.894 83.046 li
156.894 82.746 li
155.894 82.3459 li
154.894 81.946 li
153.894 81.546 li
153.094 81.046 li
152.394 80.546 li
151.894 79.946 li
151.394 79.446 li
151.194 79.146 li
150.994 78.8459 li
150.894 78.546 li
150.894 78.146 li
150.694 77.946 li
150.694 77.746 li
150.694 50.8459 li
cp
eclp
150.594 83.8459 mo
150.694 44.5459 li
150.994 44.5459 li
150.894 83.8459 li
cp
.273503 0 .280705 0 cmyk
ef
176.894 83.8459 mo
176.994 44.646 li
177.294 44.646 li
177.294 83.8459 li
cp
ef
150.894 83.8459 mo
150.994 44.5459 li
151.294 44.5459 li
151.294 83.8459 li
cp
.269963 0 .280308 0 cmyk
ef
176.594 83.8459 mo
176.594 44.646 li
176.994 44.646 li
176.894 83.8459 li
cp
ef
151.294 83.8459 mo
151.294 44.5459 li
151.694 44.5459 li
151.594 83.8459 li
cp
.265965 0 .275029 0 cmyk
ef
176.194 83.8459 mo
176.294 44.646 li
176.594 44.646 li
176.594 83.8459 li
cp
ef
151.594 83.8459 mo
151.694 44.5459 li
151.994 44.5459 li
151.994 83.8459 li
cp
.262242 0 .271885 0 cmyk
ef
175.894 83.8459 mo
175.994 44.646 li
176.294 44.646 li
176.194 83.8459 li
cp
ef
151.994 83.8459 mo
151.994 44.5459 li
152.294 44.5459 li
152.294 83.8459 li
cp
.257816 0 .266728 0 cmyk
ef
175.594 83.8459 mo
175.594 44.646 li
175.994 44.646 li
175.894 83.8459 li
cp
ef
152.294 83.8459 mo
152.294 44.5459 li
152.694 44.5459 li
152.594 83.8459 li
cp
.253483 0 .260929 0 cmyk
ef
175.194 83.8459 mo
175.294 44.646 li
175.594 44.646 li
175.594 83.8459 li
cp
ef
152.594 83.8459 mo
152.694 44.5459 li
152.994 44.5459 li
152.994 83.8459 li
cp
.248692 0 .257237 0 cmyk
ef
174.894 83.8459 mo
174.994 44.646 li
175.294 44.646 li
175.194 83.8459 li
cp
ef
152.994 83.8459 mo
152.994 44.5459 li
153.394 44.5459 li
153.294 83.8459 li
cp
.244236 0 .251469 0 cmyk
ef
174.594 83.8459 mo
174.594 44.646 li
174.994 44.646 li
174.894 83.8459 li
cp
ef
153.294 83.8459 mo
153.394 44.5459 li
153.694 44.5459 li
153.594 83.8459 li
cp
.23975 0 .247807 0 cmyk
ef
174.194 83.8459 mo
174.294 44.646 li
174.594 44.646 li
174.594 83.8459 li
cp
ef
153.594 83.8459 mo
153.694 44.5459 li
153.994 44.5459 li
153.994 83.8459 li
cp
.235843 0 .24213 0 cmyk
ef
173.894 83.8459 mo
173.994 44.646 li
174.294 44.646 li
174.194 83.8459 li
cp
ef
153.994 83.8459 mo
153.994 44.5459 li
154.294 44.5459 li
154.294 83.8459 li
cp
.232029 0 .236851 0 cmyk
ef
173.594 83.8459 mo
173.594 44.646 li
173.994 44.646 li
173.894 83.8459 li
cp
ef
154.294 83.8459 mo
154.294 44.5459 li
154.694 44.5459 li
154.594 83.8459 li
cp
.227543 0 .233005 0 cmyk
ef
173.294 83.8459 mo
173.294 44.646 li
173.594 44.646 li
173.594 83.8459 li
cp
ef
154.594 83.8459 mo
154.694 44.5459 li
154.994 44.5459 li
154.894 83.8459 li
cp
.223545 0 .228428 0 cmyk
ef
172.894 83.8459 mo
172.994 44.646 li
173.294 44.646 li
173.294 83.8459 li
cp
ef
154.894 83.8459 mo
154.994 44.5459 li
155.294 44.5459 li
155.294 83.8459 li
cp
.219211 0 .224491 0 cmyk
ef
172.594 83.8459 mo
172.594 44.646 li
172.994 44.646 li
172.894 83.8459 li
cp
ef
155.294 83.8459 mo
155.294 44.5459 li
155.694 44.5459 li
155.594 83.8459 li
cp
.215702 0 .223941 0 cmyk
ef
172.194 83.8459 mo
172.294 44.646 li
172.594 44.646 li
172.594 83.8459 li
cp
ef
155.594 83.8459 mo
155.694 44.5459 li
155.994 44.646 li
155.994 83.8459 li
cp
.211887 0 .218326 0 cmyk
ef
171.894 83.8459 mo
171.994 44.646 li
172.294 44.646 li
172.194 83.8459 li
cp
ef
155.994 83.8459 mo
155.994 44.646 li
156.294 44.646 li
156.294 83.8459 li
cp
.208194 0 .214969 0 cmyk
ef
171.594 83.8459 mo
171.594 44.646 li
171.994 44.646 li
171.894 83.8459 li
cp
ef
156.294 83.8459 mo
156.294 44.646 li
156.694 44.646 li
156.594 83.8459 li
cp
.203861 0 .20914 0 cmyk
ef
171.194 83.8459 mo
171.294 44.646 li
171.594 44.646 li
171.594 83.8459 li
cp
ef
156.594 83.8459 mo
156.694 44.646 li
156.994 44.646 li
156.994 83.8459 li
cp
.199466 0 .202976 0 cmyk
ef
170.894 83.8459 mo
170.994 44.646 li
171.294 44.646 li
171.194 83.8459 li
cp
ef
156.994 83.8459 mo
156.994 44.646 li
157.394 44.646 li
157.294 83.8459 li
cp
.194766 0 .199222 0 cmyk
ef
170.594 83.8459 mo
170.594 44.646 li
170.994 44.646 li
170.894 83.8459 li
cp
ef
157.294 83.8459 mo
157.394 44.646 li
157.694 44.646 li
157.594 83.8459 li
cp
.190097 0 .19324 0 cmyk
ef
170.294 83.8459 mo
170.294 44.646 li
170.594 44.646 li
170.594 83.8459 li
cp
ef
157.594 83.8459 mo
157.694 44.646 li
157.994 44.646 li
157.894 83.8459 li
cp
.18558 0 .189456 0 cmyk
ef
169.894 83.8459 mo
169.994 44.646 li
170.294 44.646 li
170.294 83.8459 li
cp
ef
157.894 83.8459 mo
157.994 44.646 li
158.294 44.646 li
158.294 83.8459 li
cp
.181369 0 .184024 0 cmyk
ef
169.594 83.8459 mo
169.594 44.646 li
169.994 44.646 li
169.894 83.8459 li
cp
ef
158.294 83.8459 mo
158.294 44.646 li
158.694 44.646 li
158.594 83.8459 li
cp
.176822 0 .178927 0 cmyk
ef
169.294 83.8459 mo
169.294 44.646 li
169.594 44.646 li
169.594 83.8459 li
cp
ef
158.594 83.8459 mo
158.694 44.646 li
158.994 44.646 li
158.894 83.8459 li
cp
.172122 0 .175479 0 cmyk
ef
168.894 83.8459 mo
168.994 44.646 li
169.294 44.646 li
169.294 83.8459 li
cp
ef
158.894 83.8459 mo
158.994 44.646 li
159.294 44.646 li
159.294 83.8459 li
cp
.167727 0 .171023 0 cmyk
ef
168.594 83.8459 mo
168.594 44.646 li
168.994 44.646 li
168.894 83.8459 li
cp
ef
159.294 83.8459 mo
159.294 44.646 li
159.694 44.646 li
159.594 83.8459 li
cp
.163485 0 .167544 0 cmyk
ef
168.194 83.8459 mo
168.294 44.646 li
168.594 44.646 li
168.594 83.8459 li
cp
ef
159.594 83.8459 mo
159.694 44.646 li
159.994 44.646 li
159.994 83.8459 li
cp
.159762 0 .166903 0 cmyk
ef
167.894 83.8459 mo
167.994 44.646 li
168.294 44.646 li
168.194 83.8459 li
cp
ef
159.994 83.8459 mo
159.994 44.646 li
160.294 44.646 li
160.294 83.8459 li
cp
.15671 0 .16199 0 cmyk
ef
167.594 83.8459 mo
167.594 44.646 li
167.994 44.646 li
167.894 83.8459 li
cp
ef
160.294 83.8459 mo
160.294 44.646 li
160.694 44.646 li
160.594 83.8459 li
cp
.15198 0 .158785 0 cmyk
ef
167.194 83.8459 mo
167.294 44.646 li
167.594 44.646 li
167.594 83.8459 li
cp
ef
160.594 83.8459 mo
160.694 44.646 li
160.994 44.646 li
160.994 83.8459 li
cp
.147494 0 .153017 0 cmyk
ef
166.894 83.8459 mo
166.994 44.646 li
167.294 44.646 li
167.194 83.8459 li
cp
ef
160.994 83.8459 mo
160.994 44.646 li
161.394 44.646 li
161.294 83.8459 li
cp
.143069 0 .146975 0 cmyk
ef
166.594 83.8459 mo
166.694 44.646 li
166.994 44.646 li
166.894 83.8459 li
cp
ef
161.294 83.8459 mo
161.394 44.646 li
161.694 44.646 li
161.594 83.8459 li
cp
.138125 0 .142977 0 cmyk
ef
166.294 83.8459 mo
166.294 44.646 li
166.694 44.646 li
166.594 83.8459 li
cp
ef
161.594 83.8459 mo
161.694 44.646 li
161.994 44.646 li
161.894 83.8459 li
cp
.133516 0 .136843 0 cmyk
ef
165.894 83.8459 mo
165.994 44.646 li
166.294 44.646 li
166.294 83.8459 li
cp
ef
161.894 83.8459 mo
161.994 44.646 li
162.294 44.646 li
162.294 83.8459 li
cp
.128756 0 .132662 0 cmyk
ef
165.594 83.8459 mo
165.594 44.646 li
165.994 44.646 li
165.894 83.8459 li
cp
ef
162.294 83.8459 mo
162.294 44.646 li
162.694 44.646 li
162.594 83.8459 li
cp
.124544 0 .127016 0 cmyk
ef
165.294 83.8459 mo
165.294 44.646 li
165.594 44.646 li
165.594 83.8459 li
cp
ef
162.594 83.8459 mo
162.694 44.646 li
162.994 44.646 li
162.894 83.8459 li
cp
.119936 0 .121096 0 cmyk
ef
164.894 83.8459 mo
164.994 44.646 li
165.294 44.646 li
165.294 83.8459 li
cp
ef
162.894 83.8459 mo
162.994 44.646 li
163.294 44.646 li
163.294 83.8459 li
cp
.113588 0 .115938 0 cmyk
ef
164.594 83.8459 mo
164.594 44.646 li
164.994 44.646 li
164.894 83.8459 li
cp
ef
163.294 83.8459 mo
163.294 44.646 li
163.694 44.646 li
163.594 83.8459 li
cp
.108553 0 .109529 0 cmyk
ef
164.194 83.8459 mo
164.294 44.646 li
164.594 44.646 li
164.594 83.8459 li
cp
ef
163.594 83.8459 mo
163.694 44.646 li
164.294 44.646 li
164.194 83.8459 li
cp
.0977188 0 .105287 0 cmyk
ef
grestore
150.694 50.8459 mo
150.694 47.746 157.394 44.646 163.994 44.646 cv
170.594 44.646 177.194 47.746 177.194 50.8459 cv
177.194 77.646 li
177.194 80.746 170.594 83.8459 163.994 83.8459 cv
157.394 83.8459 150.694 80.746 150.694 77.646 cv
150.694 50.8459 li
cp
@
gsave
150.694 50.8459 mo
177.094 50.8459 li
177.094 51.146 li
177.094 51.446 li
176.994 51.746 li
176.894 52.046 li
176.694 52.3459 li
176.494 52.546 li
175.994 53.146 li
175.394 53.646 li
174.694 54.146 li
173.894 54.646 li
172.994 55.146 li
171.994 55.546 li
170.994 55.946 li
169.894 56.146 li
168.894 56.546 li
167.594 56.746 li
166.394 56.946 li
165.194 57.046 li
163.894 57.046 li
162.694 57.046 li
161.394 56.946 li
160.194 56.746 li
159.094 56.546 li
157.894 56.146 li
156.894 55.946 li
155.894 55.546 li
154.894 55.146 li
153.894 54.646 li
153.094 54.146 li
152.394 53.646 li
151.894 53.146 li
151.394 52.546 li
151.194 52.3459 li
150.994 52.046 li
150.894 51.746 li
150.894 51.446 li
150.694 51.146 li
150.694 50.8459 li
cp
eclp
150.694 57.046 mo
150.694 50.746 li
150.994 50.746 li
150.994 57.046 li
cp
.273503 0 .280705 0 cmyk
ef
176.894 57.046 mo
176.894 50.746 li
177.194 50.746 li
177.194 57.046 li
cp
ef
150.994 57.046 mo
150.994 50.746 li
151.394 50.746 li
151.394 57.046 li
cp
.269963 0 .280308 0 cmyk
ef
176.494 57.046 mo
176.494 50.746 li
176.894 50.746 li
176.894 57.046 li
cp
ef
151.394 57.046 mo
151.394 50.746 li
151.694 50.746 li
151.694 57.046 li
cp
.265965 0 .275029 0 cmyk
ef
176.194 57.046 mo
176.194 50.746 li
176.494 50.746 li
176.494 57.046 li
cp
ef
151.694 57.046 mo
151.694 50.746 li
151.994 50.746 li
151.994 57.046 li
cp
.262242 0 .271885 0 cmyk
ef
175.894 57.046 mo
175.894 50.746 li
176.194 50.746 li
176.194 57.046 li
cp
ef
151.994 57.046 mo
151.994 50.746 li
152.394 50.746 li
152.394 57.046 li
cp
.257816 0 .266728 0 cmyk
ef
175.594 57.046 mo
175.594 50.746 li
175.894 50.746 li
175.894 57.046 li
cp
ef
152.394 57.046 mo
152.394 50.746 li
152.694 50.746 li
152.694 57.046 li
cp
.253483 0 .260929 0 cmyk
ef
175.194 57.046 mo
175.194 50.746 li
175.594 50.746 li
175.594 57.046 li
cp
ef
152.694 57.046 mo
152.694 50.746 li
152.994 50.746 li
152.994 57.046 li
cp
.248692 0 .257237 0 cmyk
ef
174.894 57.046 mo
174.894 50.746 li
175.194 50.746 li
175.194 57.046 li
cp
ef
152.994 57.046 mo
152.994 50.746 li
153.394 50.746 li
153.394 57.046 li
cp
.244236 0 .251469 0 cmyk
ef
174.594 57.046 mo
174.594 50.746 li
174.894 50.746 li
174.894 57.046 li
cp
ef
153.394 57.046 mo
153.394 50.746 li
153.694 50.746 li
153.694 57.046 li
cp
.23975 0 .247807 0 cmyk
ef
174.194 57.046 mo
174.194 50.746 li
174.594 50.746 li
174.594 57.046 li
cp
ef
153.694 57.046 mo
153.694 50.746 li
153.994 50.746 li
153.994 57.046 li
cp
.235843 0 .24213 0 cmyk
ef
173.894 57.046 mo
173.894 50.746 li
174.194 50.746 li
174.194 57.046 li
cp
ef
153.994 57.046 mo
153.994 50.746 li
154.294 50.746 li
154.294 57.046 li
cp
.232029 0 .236851 0 cmyk
ef
173.594 57.046 mo
173.594 50.746 li
173.894 50.746 li
173.894 57.046 li
cp
ef
154.294 57.046 mo
154.294 50.746 li
154.694 50.746 li
154.694 57.046 li
cp
.227543 0 .233005 0 cmyk
ef
173.194 57.046 mo
173.194 50.746 li
173.594 50.746 li
173.594 57.046 li
cp
ef
154.694 57.046 mo
154.694 50.746 li
154.994 50.746 li
154.994 57.046 li
cp
.223545 0 .228428 0 cmyk
ef
172.894 57.046 mo
172.894 50.746 li
173.194 50.746 li
173.194 57.046 li
cp
ef
154.994 57.046 mo
154.994 50.746 li
155.294 50.746 li
155.294 57.046 li
cp
.219211 0 .224491 0 cmyk
ef
172.594 57.046 mo
172.594 50.746 li
172.894 50.746 li
172.894 57.046 li
cp
ef
155.294 57.046 mo
155.294 50.746 li
155.694 50.746 li
155.694 57.046 li
cp
.215702 0 .223941 0 cmyk
ef
172.194 57.046 mo
172.194 50.746 li
172.594 50.746 li
172.594 57.046 li
cp
ef
155.694 57.046 mo
155.694 50.746 li
155.994 50.746 li
155.994 57.046 li
cp
.211887 0 .218326 0 cmyk
ef
171.894 57.046 mo
171.894 50.746 li
172.194 50.746 li
172.194 57.046 li
cp
ef
155.994 57.046 mo
155.994 50.746 li
156.294 50.746 li
156.294 57.046 li
cp
.208194 0 .214969 0 cmyk
ef
171.594 57.046 mo
171.594 50.746 li
171.894 50.746 li
171.894 57.046 li
cp
ef
156.294 57.046 mo
156.294 50.746 li
156.694 50.746 li
156.694 57.046 li
cp
.203861 0 .20914 0 cmyk
ef
171.194 57.046 mo
171.194 50.746 li
171.594 50.746 li
171.594 57.046 li
cp
ef
156.694 57.046 mo
156.694 50.746 li
156.994 50.746 li
156.994 57.046 li
cp
.199466 0 .202976 0 cmyk
ef
170.894 57.046 mo
170.894 50.746 li
171.194 50.746 li
171.194 57.046 li
cp
ef
156.994 57.046 mo
156.994 50.746 li
157.394 50.746 li
157.394 57.046 li
cp
.194766 0 .199222 0 cmyk
ef
170.594 57.046 mo
170.594 50.746 li
170.894 50.746 li
170.894 57.046 li
cp
ef
157.394 57.046 mo
157.394 50.746 li
157.694 50.746 li
157.694 57.046 li
cp
.190097 0 .19324 0 cmyk
ef
170.294 57.046 mo
170.294 50.746 li
170.594 50.746 li
170.594 57.046 li
cp
ef
157.694 57.046 mo
157.694 50.746 li
157.994 50.746 li
157.994 57.046 li
cp
.18558 0 .189456 0 cmyk
ef
169.894 57.046 mo
169.894 50.746 li
170.294 50.746 li
170.294 57.046 li
cp
ef
157.994 57.046 mo
157.994 50.746 li
158.294 50.746 li
158.294 57.046 li
cp
.181369 0 .184024 0 cmyk
ef
169.594 57.046 mo
169.594 50.746 li
169.894 50.746 li
169.894 57.046 li
cp
ef
158.294 57.046 mo
158.294 50.746 li
158.694 50.746 li
158.694 57.046 li
cp
.176822 0 .178927 0 cmyk
ef
169.294 57.046 mo
169.294 50.746 li
169.594 50.746 li
169.594 57.046 li
cp
ef
158.694 57.046 mo
158.694 50.746 li
158.994 50.746 li
158.994 57.046 li
cp
.172122 0 .175479 0 cmyk
ef
168.894 57.046 mo
168.894 50.746 li
169.294 50.746 li
169.294 57.046 li
cp
ef
158.994 57.046 mo
158.994 50.746 li
159.294 50.746 li
159.294 57.046 li
cp
.167727 0 .171023 0 cmyk
ef
168.594 57.046 mo
168.594 50.746 li
168.894 50.746 li
168.894 57.046 li
cp
ef
159.294 57.046 mo
159.294 50.746 li
159.594 50.746 li
159.594 57.046 li
cp
.163485 0 .167544 0 cmyk
ef
168.294 57.046 mo
168.294 50.746 li
168.594 50.746 li
168.594 57.046 li
cp
ef
159.594 57.046 mo
159.594 50.746 li
159.994 50.746 li
159.994 57.046 li
cp
.159762 0 .166903 0 cmyk
ef
167.894 57.046 mo
167.894 50.746 li
168.294 50.746 li
168.294 57.046 li
cp
ef
159.994 57.046 mo
159.994 50.746 li
160.294 50.746 li
160.294 57.046 li
cp
.15671 0 .16199 0 cmyk
ef
167.594 57.046 mo
167.594 50.746 li
167.894 50.746 li
167.894 57.046 li
cp
ef
160.294 57.046 mo
160.294 50.746 li
160.694 50.746 li
160.694 57.046 li
cp
.15198 0 .158785 0 cmyk
ef
167.294 57.046 mo
167.294 50.746 li
167.594 50.746 li
167.594 57.046 li
cp
ef
160.694 57.046 mo
160.694 50.746 li
160.994 50.746 li
160.994 57.046 li
cp
.147494 0 .153017 0 cmyk
ef
166.894 57.046 mo
166.894 50.746 li
167.294 50.746 li
167.294 57.046 li
cp
ef
160.994 57.046 mo
160.994 50.746 li
161.294 50.746 li
161.294 57.046 li
cp
.143069 0 .146975 0 cmyk
ef
166.594 57.046 mo
166.594 50.746 li
166.894 50.746 li
166.894 57.046 li
cp
ef
161.294 57.046 mo
161.294 50.746 li
161.694 50.746 li
161.694 57.046 li
cp
.138125 0 .142977 0 cmyk
ef
166.294 57.046 mo
166.294 50.746 li
166.594 50.746 li
166.594 57.046 li
cp
ef
161.694 57.046 mo
161.694 50.746 li
161.994 50.746 li
161.994 57.046 li
cp
.133516 0 .136843 0 cmyk
ef
165.894 57.046 mo
165.894 50.746 li
166.294 50.746 li
166.294 57.046 li
cp
ef
161.994 57.046 mo
161.994 50.746 li
162.294 50.746 li
162.294 57.046 li
cp
.128756 0 .132662 0 cmyk
ef
165.594 57.046 mo
165.594 50.746 li
165.894 50.746 li
165.894 57.046 li
cp
ef
162.294 57.046 mo
162.294 50.746 li
162.694 50.746 li
162.694 57.046 li
cp
.124544 0 .127016 0 cmyk
ef
165.294 57.046 mo
165.294 50.746 li
165.594 50.746 li
165.594 57.046 li
cp
ef
162.694 57.046 mo
162.694 50.746 li
162.994 50.746 li
162.994 57.046 li
cp
.119936 0 .121096 0 cmyk
ef
164.994 57.046 mo
164.994 50.746 li
165.294 50.746 li
165.294 57.046 li
cp
ef
162.994 57.046 mo
162.994 50.746 li
163.294 50.746 li
163.294 57.046 li
cp
.113588 0 .115938 0 cmyk
ef
164.594 57.046 mo
164.594 50.746 li
164.994 50.746 li
164.994 57.046 li
cp
ef
163.294 57.046 mo
163.294 50.746 li
163.594 50.746 li
163.594 57.046 li
cp
.108553 0 .109529 0 cmyk
ef
164.294 57.046 mo
164.294 50.746 li
164.594 50.746 li
164.594 57.046 li
cp
ef
163.594 57.046 mo
163.594 50.746 li
164.294 50.746 li
164.294 57.046 li
cp
.0977188 0 .105287 0 cmyk
ef
grestore
150.694 50.8459 mo
150.694 53.9459 157.394 56.9459 163.994 56.9459 cv
170.594 56.9459 177.194 53.9459 177.194 50.8459 cv
@
gsave
163.894 44.746 mo
166.594 44.8459 li
169.094 45.146 li
170.294 45.446 li
171.394 45.746 li
172.394 46.146 li
173.294 46.546 li
174.194 46.946 li
174.894 47.446 li
175.594 47.8459 li
176.094 48.446 li
176.594 49.046 li
176.694 49.3459 li
176.894 49.646 li
176.994 49.946 li
177.094 50.146 li
177.094 50.546 li
177.094 50.8459 li
177.094 51.146 li
177.094 51.546 li
176.994 51.8459 li
176.894 52.146 li
176.694 52.446 li
176.594 52.746 li
176.094 53.3459 li
175.594 53.8459 li
174.894 54.446 li
174.194 54.8459 li
173.294 55.3459 li
172.394 55.746 li
171.394 56.046 li
170.294 56.3459 li
169.094 56.646 li
166.594 56.946 li
163.894 57.146 li
161.194 56.946 li
158.694 56.646 li
157.494 56.3459 li
156.494 56.046 li
155.394 55.746 li
154.494 55.3459 li
153.594 54.8459 li
152.894 54.446 li
152.294 53.8459 li
151.694 53.3459 li
151.294 52.746 li
151.094 52.446 li
150.994 52.146 li
150.894 51.8459 li
150.894 51.546 li
150.694 51.146 li
150.694 50.8459 li
150.694 50.546 li
150.894 50.146 li
150.894 49.946 li
150.994 49.646 li
151.094 49.3459 li
151.294 49.046 li
151.694 48.446 li
152.294 47.8459 li
152.894 47.446 li
153.594 46.946 li
154.494 46.546 li
155.394 46.146 li
156.494 45.746 li
157.494 45.446 li
158.694 45.146 li
161.194 44.8459 li
163.894 44.746 li
cp
eclp
150.694 44.646 mo
177.194 44.646 li
177.194 45.8459 li
150.694 45.8459 li
cp
.273503 0 .280705 0 cmyk
ef
150.694 45.8459 mo
177.194 45.8459 li
177.194 46.146 li
150.694 46.146 li
cp
ef
150.694 46.146 mo
177.194 46.146 li
177.194 46.446 li
150.694 46.446 li
cp
.269963 0 .280308 0 cmyk
ef
150.694 46.446 mo
177.194 46.446 li
177.194 46.7461 li
150.694 46.7461 li
cp
.265965 0 .275029 0 cmyk
ef
150.694 46.746 mo
177.194 46.746 li
177.194 47.046 li
150.694 47.046 li
cp
.262242 0 .271885 0 cmyk
ef
150.694 47.046 mo
177.194 47.046 li
177.194 47.3461 li
150.694 47.3461 li
cp
.257816 0 .266728 0 cmyk
ef
150.694 47.3459 mo
177.194 47.3459 li
177.194 47.5459 li
150.694 47.5459 li
cp
.253483 0 .260929 0 cmyk
ef
150.694 47.546 mo
177.194 47.546 li
177.194 47.8461 li
150.694 47.8461 li
cp
.248692 0 .257237 0 cmyk
ef
150.694 47.8459 mo
177.194 47.8459 li
177.194 48.146 li
150.694 48.146 li
cp
.244236 0 .251469 0 cmyk
ef
150.694 48.146 mo
177.194 48.146 li
177.194 48.446 li
150.694 48.446 li
cp
.23975 0 .247807 0 cmyk
ef
150.694 48.446 mo
177.194 48.446 li
177.194 48.7461 li
150.694 48.7461 li
cp
.235843 0 .24213 0 cmyk
ef
150.694 48.746 mo
177.194 48.746 li
177.194 49.046 li
150.694 49.046 li
cp
.232029 0 .236851 0 cmyk
ef
150.694 49.046 mo
177.194 49.046 li
177.194 49.3461 li
150.694 49.3461 li
cp
.227543 0 .233005 0 cmyk
ef
150.694 49.3459 mo
177.194 49.3459 li
177.194 49.646 li
150.694 49.646 li
cp
.223545 0 .228428 0 cmyk
ef
150.694 49.646 mo
177.194 49.646 li
177.194 49.946 li
150.694 49.946 li
cp
.219211 0 .224491 0 cmyk
ef
150.694 49.946 mo
177.194 49.946 li
177.194 50.146 li
150.694 50.146 li
cp
.215641 0 .218753 0 cmyk
ef
150.694 50.146 mo
177.194 50.146 li
177.194 50.446 li
150.694 50.446 li
cp
.211704 0 .213291 0 cmyk
ef
150.694 50.446 mo
177.194 50.446 li
177.194 50.7461 li
150.694 50.7461 li
cp
.208011 0 .209628 0 cmyk
ef
150.694 50.746 mo
177.194 50.746 li
177.194 51.046 li
150.694 51.046 li
cp
.203555 0 .203464 0 cmyk
ef
150.694 51.046 mo
177.194 51.046 li
177.194 51.3461 li
150.694 51.3461 li
cp
.198886 0 .19971 0 cmyk
ef
150.694 51.3459 mo
177.194 51.3459 li
177.194 51.646 li
150.694 51.646 li
cp
.190097 0 .19324 0 cmyk
ef
150.694 51.646 mo
177.194 51.646 li
177.194 51.946 li
150.694 51.946 li
cp
.186069 0 .192691 0 cmyk
ef
150.694 51.946 mo
177.194 51.946 li
177.194 52.2461 li
150.694 52.2461 li
cp
.181888 0 .188937 0 cmyk
ef
150.694 52.246 mo
177.194 52.246 li
177.194 52.4459 li
150.694 52.4459 li
cp
.177523 0 .183536 0 cmyk
ef
150.694 52.446 mo
177.194 52.446 li
177.194 52.7461 li
150.694 52.7461 li
cp
.172854 0 .180301 0 cmyk
ef
150.694 52.746 mo
177.194 52.746 li
177.194 53.046 li
150.694 53.046 li
cp
.168032 0 .174899 0 cmyk
ef
150.694 53.046 mo
177.194 53.046 li
177.194 53.3461 li
150.694 53.3461 li
cp
.163882 0 .170352 0 cmyk
ef
150.694 53.3459 mo
177.194 53.3459 li
177.194 53.646 li
150.694 53.646 li
cp
.159762 0 .166903 0 cmyk
ef
150.694 53.646 mo
177.194 53.646 li
177.194 53.946 li
150.694 53.946 li
cp
.15671 0 .16199 0 cmyk
ef
150.694 53.946 mo
177.194 53.946 li
177.194 54.2461 li
150.694 54.2461 li
cp
.15198 0 .158785 0 cmyk
ef
150.694 54.246 mo
177.194 54.246 li
177.194 54.546 li
150.694 54.546 li
cp
.147494 0 .153017 0 cmyk
ef
150.694 54.546 mo
177.194 54.546 li
177.194 54.746 li
150.694 54.746 li
cp
.143069 0 .146975 0 cmyk
ef
150.694 54.746 mo
177.194 54.746 li
177.194 55.046 li
150.694 55.046 li
cp
.138125 0 .142977 0 cmyk
ef
150.694 55.046 mo
177.194 55.046 li
177.194 55.3461 li
150.694 55.3461 li
cp
.133516 0 .136843 0 cmyk
ef
150.694 55.3459 mo
177.194 55.3459 li
177.194 55.646 li
150.694 55.646 li
cp
.128756 0 .132662 0 cmyk
ef
150.694 55.646 mo
177.194 55.646 li
177.194 55.946 li
150.694 55.946 li
cp
.124544 0 .127016 0 cmyk
ef
150.694 55.946 mo
177.194 55.946 li
177.194 56.2461 li
150.694 56.2461 li
cp
.119936 0 .121096 0 cmyk
ef
150.694 56.246 mo
177.194 56.246 li
177.194 56.546 li
150.694 56.546 li
cp
.113588 0 .115938 0 cmyk
ef
150.694 56.546 mo
177.194 56.546 li
177.194 56.746 li
150.694 56.746 li
cp
.108553 0 .109529 0 cmyk
ef
150.694 56.746 mo
177.194 56.746 li
177.194 57.146 li
150.694 57.146 li
cp
.0977188 0 .105287 0 cmyk
ef
grestore
163.994 44.646 mo
171.394 44.646 177.194 47.3459 177.194 50.8459 cv
177.194 54.3459 171.394 57.046 163.994 57.046 cv
156.494 57.046 150.694 54.3459 150.694 50.8459 cv
150.694 47.3459 156.494 44.646 163.994 44.646 cv
cp
@
gsave
150.694 192.646 mo
150.694 192.346 li
150.894 192.046 li
150.894 191.746 li
150.994 191.446 li
151.194 191.146 li
151.394 190.846 li
151.894 190.346 li
152.394 189.846 li
153.094 189.346 li
153.894 188.846 li
154.894 188.446 li
155.894 187.946 li
156.894 187.646 li
157.894 187.146 li
159.094 187.046 li
160.194 186.746 li
161.394 186.646 li
162.694 186.546 li
163.894 186.446 li
165.194 186.546 li
166.394 186.646 li
167.594 186.746 li
168.894 187.046 li
169.894 187.146 li
170.994 187.646 li
171.994 187.946 li
172.994 188.446 li
173.894 188.846 li
174.694 189.346 li
175.394 189.846 li
175.994 190.346 li
176.494 190.846 li
176.694 191.146 li
176.894 191.446 li
176.994 191.746 li
177.094 192.046 li
177.094 192.346 li
177.094 192.646 li
177.094 219.446 li
177.094 219.746 li
177.094 220.046 li
176.994 220.346 li
176.894 220.646 li
176.694 220.846 li
176.494 221.146 li
175.994 221.746 li
175.394 222.146 li
174.694 222.746 li
173.894 223.146 li
172.994 223.646 li
171.994 224.146 li
170.994 224.446 li
169.894 224.746 li
168.894 225.046 li
167.594 225.346 li
166.394 225.446 li
165.194 225.546 li
163.894 225.646 li
162.694 225.546 li
161.394 225.446 li
160.194 225.346 li
159.094 225.046 li
157.894 224.746 li
156.894 224.446 li
155.894 224.146 li
154.894 223.646 li
153.894 223.146 li
153.094 222.746 li
152.394 222.146 li
151.894 221.746 li
151.394 221.146 li
151.194 220.846 li
150.994 220.646 li
150.894 220.346 li
150.894 220.046 li
150.694 219.746 li
150.694 219.446 li
150.694 192.646 li
cp
eclp
150.594 225.546 mo
150.694 186.346 li
150.994 186.346 li
150.894 225.546 li
cp
.273503 0 .280705 0 cmyk
ef
176.894 225.646 mo
176.994 186.346 li
177.294 186.346 li
177.294 225.646 li
cp
ef
150.894 225.546 mo
150.994 186.346 li
151.294 186.346 li
151.294 225.546 li
cp
.269963 0 .280308 0 cmyk
ef
176.594 225.646 mo
176.594 186.346 li
176.994 186.346 li
176.894 225.646 li
cp
ef
151.294 225.546 mo
151.294 186.346 li
151.694 186.346 li
151.594 225.546 li
cp
.265965 0 .275029 0 cmyk
ef
176.194 225.646 mo
176.294 186.346 li
176.594 186.346 li
176.594 225.646 li
cp
ef
151.594 225.546 mo
151.694 186.346 li
151.994 186.346 li
151.994 225.546 li
cp
.262242 0 .271885 0 cmyk
ef
175.894 225.646 mo
175.994 186.346 li
176.294 186.346 li
176.194 225.646 li
cp
ef
151.994 225.546 mo
151.994 186.346 li
152.294 186.346 li
152.294 225.546 li
cp
.257816 0 .266728 0 cmyk
ef
175.594 225.646 mo
175.594 186.346 li
175.994 186.346 li
175.894 225.646 li
cp
ef
152.294 225.546 mo
152.294 186.346 li
152.694 186.346 li
152.594 225.546 li
cp
.253483 0 .260929 0 cmyk
ef
175.194 225.646 mo
175.294 186.346 li
175.594 186.346 li
175.594 225.646 li
cp
ef
152.594 225.546 mo
152.694 186.346 li
152.994 186.346 li
152.994 225.546 li
cp
.248692 0 .257237 0 cmyk
ef
174.894 225.646 mo
174.994 186.346 li
175.294 186.346 li
175.194 225.646 li
cp
ef
152.994 225.546 mo
152.994 186.346 li
153.394 186.346 li
153.294 225.546 li
cp
.244236 0 .251469 0 cmyk
ef
174.594 225.646 mo
174.594 186.346 li
174.994 186.346 li
174.894 225.646 li
cp
ef
153.294 225.546 mo
153.394 186.346 li
153.694 186.346 li
153.594 225.546 li
cp
.23975 0 .247807 0 cmyk
ef
174.194 225.646 mo
174.294 186.346 li
174.594 186.346 li
174.594 225.646 li
cp
ef
153.594 225.546 mo
153.694 186.346 li
153.994 186.346 li
153.994 225.546 li
cp
.235843 0 .24213 0 cmyk
ef
173.894 225.646 mo
173.994 186.346 li
174.294 186.346 li
174.194 225.646 li
cp
ef
153.994 225.546 mo
153.994 186.346 li
154.294 186.346 li
154.294 225.546 li
cp
.232029 0 .236851 0 cmyk
ef
173.594 225.646 mo
173.594 186.346 li
173.994 186.346 li
173.894 225.646 li
cp
ef
154.294 225.546 mo
154.294 186.346 li
154.694 186.346 li
154.594 225.546 li
cp
.227543 0 .233005 0 cmyk
ef
173.294 225.646 mo
173.294 186.346 li
173.594 186.346 li
173.594 225.646 li
cp
ef
154.594 225.546 mo
154.694 186.346 li
154.994 186.346 li
154.894 225.546 li
cp
.223545 0 .228428 0 cmyk
ef
172.894 225.646 mo
172.994 186.346 li
173.294 186.346 li
173.294 225.646 li
cp
ef
154.894 225.546 mo
154.994 186.346 li
155.294 186.346 li
155.294 225.546 li
cp
.219211 0 .224491 0 cmyk
ef
172.594 225.646 mo
172.594 186.346 li
172.994 186.346 li
172.894 225.646 li
cp
ef
155.294 225.546 mo
155.294 186.346 li
155.694 186.346 li
155.594 225.546 li
cp
.215702 0 .223941 0 cmyk
ef
172.194 225.646 mo
172.294 186.346 li
172.594 186.346 li
172.594 225.646 li
cp
ef
155.594 225.546 mo
155.694 186.346 li
155.994 186.346 li
155.994 225.646 li
cp
.211887 0 .218326 0 cmyk
ef
171.894 225.646 mo
171.994 186.346 li
172.294 186.346 li
172.194 225.646 li
cp
ef
155.994 225.646 mo
155.994 186.346 li
156.294 186.346 li
156.294 225.646 li
cp
.208194 0 .214969 0 cmyk
ef
171.594 225.646 mo
171.594 186.346 li
171.994 186.346 li
171.894 225.646 li
cp
ef
156.294 225.646 mo
156.294 186.346 li
156.694 186.346 li
156.594 225.646 li
cp
.203861 0 .20914 0 cmyk
ef
171.194 225.646 mo
171.294 186.346 li
171.594 186.346 li
171.594 225.646 li
cp
ef
156.594 225.646 mo
156.694 186.346 li
156.994 186.346 li
156.994 225.646 li
cp
.199466 0 .202976 0 cmyk
ef
170.894 225.646 mo
170.994 186.346 li
171.294 186.346 li
171.194 225.646 li
cp
ef
156.994 225.646 mo
156.994 186.346 li
157.394 186.346 li
157.294 225.646 li
cp
.194766 0 .199222 0 cmyk
ef
170.594 225.646 mo
170.594 186.346 li
170.994 186.346 li
170.894 225.646 li
cp
ef
157.294 225.646 mo
157.394 186.346 li
157.694 186.346 li
157.594 225.646 li
cp
.190097 0 .19324 0 cmyk
ef
170.294 225.646 mo
170.294 186.346 li
170.594 186.346 li
170.594 225.646 li
cp
ef
157.594 225.646 mo
157.694 186.346 li
157.994 186.346 li
157.894 225.646 li
cp
.18558 0 .189456 0 cmyk
ef
169.894 225.646 mo
169.994 186.346 li
170.294 186.346 li
170.294 225.646 li
cp
ef
157.894 225.646 mo
157.994 186.346 li
158.294 186.346 li
158.294 225.646 li
cp
.181369 0 .184024 0 cmyk
ef
169.594 225.646 mo
169.594 186.346 li
169.994 186.346 li
169.894 225.646 li
cp
ef
158.294 225.646 mo
158.294 186.346 li
158.694 186.346 li
158.594 225.646 li
cp
.176822 0 .178927 0 cmyk
ef
169.294 225.646 mo
169.294 186.346 li
169.594 186.346 li
169.594 225.646 li
cp
ef
158.594 225.646 mo
158.694 186.346 li
158.994 186.346 li
158.894 225.646 li
cp
.172122 0 .175479 0 cmyk
ef
168.894 225.646 mo
168.994 186.346 li
169.294 186.346 li
169.294 225.646 li
cp
ef
158.894 225.646 mo
158.994 186.346 li
159.294 186.346 li
159.294 225.646 li
cp
.167727 0 .171023 0 cmyk
ef
168.594 225.646 mo
168.594 186.346 li
168.994 186.346 li
168.894 225.646 li
cp
ef
159.294 225.646 mo
159.294 186.346 li
159.694 186.346 li
159.594 225.646 li
cp
.163485 0 .167544 0 cmyk
ef
168.194 225.646 mo
168.294 186.346 li
168.594 186.346 li
168.594 225.646 li
cp
ef
159.594 225.646 mo
159.694 186.346 li
159.994 186.346 li
159.994 225.646 li
cp
.159762 0 .166903 0 cmyk
ef
167.894 225.646 mo
167.994 186.346 li
168.294 186.346 li
168.194 225.646 li
cp
ef
159.994 225.646 mo
159.994 186.346 li
160.294 186.346 li
160.294 225.646 li
cp
.15671 0 .16199 0 cmyk
ef
167.594 225.646 mo
167.594 186.346 li
167.994 186.346 li
167.894 225.646 li
cp
ef
160.294 225.646 mo
160.294 186.346 li
160.694 186.346 li
160.594 225.646 li
cp
.15198 0 .158785 0 cmyk
ef
167.194 225.646 mo
167.294 186.346 li
167.594 186.346 li
167.594 225.646 li
cp
ef
160.594 225.646 mo
160.694 186.346 li
160.994 186.346 li
160.994 225.646 li
cp
.147494 0 .153017 0 cmyk
ef
166.894 225.646 mo
166.994 186.346 li
167.294 186.346 li
167.194 225.646 li
cp
ef
160.994 225.646 mo
160.994 186.346 li
161.394 186.346 li
161.294 225.646 li
cp
.143069 0 .146975 0 cmyk
ef
166.594 225.646 mo
166.694 186.346 li
166.994 186.346 li
166.894 225.646 li
cp
ef
161.294 225.646 mo
161.394 186.346 li
161.694 186.346 li
161.594 225.646 li
cp
.138125 0 .142977 0 cmyk
ef
166.294 225.646 mo
166.294 186.346 li
166.694 186.346 li
166.594 225.646 li
cp
ef
161.594 225.646 mo
161.694 186.346 li
161.994 186.346 li
161.894 225.646 li
cp
.133516 0 .136843 0 cmyk
ef
165.894 225.646 mo
165.994 186.346 li
166.294 186.346 li
166.294 225.646 li
cp
ef
161.894 225.646 mo
161.994 186.346 li
162.294 186.346 li
162.294 225.646 li
cp
.128756 0 .132662 0 cmyk
ef
165.594 225.646 mo
165.594 186.346 li
165.994 186.346 li
165.894 225.646 li
cp
ef
162.294 225.646 mo
162.294 186.346 li
162.694 186.346 li
162.594 225.646 li
cp
.124544 0 .127016 0 cmyk
ef
165.294 225.646 mo
165.294 186.346 li
165.594 186.346 li
165.594 225.646 li
cp
ef
162.594 225.646 mo
162.694 186.346 li
162.994 186.346 li
162.894 225.646 li
cp
.119936 0 .121096 0 cmyk
ef
164.894 225.646 mo
164.994 186.346 li
165.294 186.346 li
165.294 225.646 li
cp
ef
162.894 225.646 mo
162.994 186.346 li
163.294 186.346 li
163.294 225.646 li
cp
.113588 0 .115938 0 cmyk
ef
164.594 225.646 mo
164.594 186.346 li
164.994 186.346 li
164.894 225.646 li
cp
ef
163.294 225.646 mo
163.294 186.346 li
163.694 186.346 li
163.594 225.646 li
cp
.108553 0 .109529 0 cmyk
ef
164.194 225.646 mo
164.294 186.346 li
164.594 186.346 li
164.594 225.646 li
cp
ef
163.594 225.646 mo
163.694 186.346 li
164.294 186.346 li
164.194 225.646 li
cp
.0977188 0 .105287 0 cmyk
ef
grestore
150.694 192.546 mo
150.694 189.446 157.394 186.446 163.994 186.446 cv
170.594 186.446 177.194 189.446 177.194 192.546 cv
177.194 219.346 li
177.194 222.446 170.594 225.546 163.994 225.546 cv
157.394 225.546 150.694 222.446 150.694 219.346 cv
150.694 192.546 li
cp
@
gsave
150.694 192.646 mo
177.094 192.646 li
177.094 192.946 li
177.094 193.146 li
176.994 193.446 li
176.894 193.746 li
176.694 194.046 li
176.494 194.346 li
175.994 194.846 li
175.394 195.446 li
174.694 195.946 li
173.894 196.346 li
172.994 196.846 li
171.994 197.146 li
170.994 197.646 li
169.894 197.946 li
168.894 198.146 li
167.594 198.446 li
166.394 198.646 li
165.194 198.746 li
163.894 198.746 li
162.694 198.746 li
161.394 198.646 li
160.194 198.446 li
159.094 198.146 li
157.894 197.946 li
156.894 197.646 li
155.894 197.146 li
154.894 196.846 li
153.894 196.346 li
153.094 195.946 li
152.394 195.446 li
151.894 194.846 li
151.394 194.346 li
151.194 194.046 li
150.994 193.746 li
150.894 193.446 li
150.894 193.146 li
150.694 192.946 li
150.694 192.646 li
cp
eclp
150.694 198.746 mo
150.694 192.446 li
150.994 192.446 li
150.994 198.746 li
cp
.273503 0 .280705 0 cmyk
ef
176.894 198.846 mo
176.894 192.446 li
177.194 192.446 li
177.194 198.846 li
cp
ef
150.994 198.746 mo
150.994 192.446 li
151.394 192.446 li
151.394 198.746 li
cp
.269963 0 .280308 0 cmyk
ef
176.494 198.846 mo
176.494 192.446 li
176.894 192.446 li
176.894 198.846 li
cp
ef
151.394 198.746 mo
151.394 192.446 li
151.694 192.446 li
151.694 198.746 li
cp
.265965 0 .275029 0 cmyk
ef
176.194 198.846 mo
176.194 192.446 li
176.494 192.446 li
176.494 198.846 li
cp
ef
151.694 198.746 mo
151.694 192.446 li
151.994 192.446 li
151.994 198.746 li
cp
.262242 0 .271885 0 cmyk
ef
175.894 198.846 mo
175.894 192.446 li
176.194 192.446 li
176.194 198.846 li
cp
ef
151.994 198.746 mo
151.994 192.446 li
152.394 192.446 li
152.394 198.746 li
cp
.257816 0 .266728 0 cmyk
ef
175.594 198.846 mo
175.594 192.446 li
175.894 192.446 li
175.894 198.846 li
cp
ef
152.394 198.746 mo
152.394 192.446 li
152.694 192.446 li
152.694 198.746 li
cp
.253483 0 .260929 0 cmyk
ef
175.194 198.846 mo
175.194 192.446 li
175.594 192.446 li
175.594 198.846 li
cp
ef
152.694 198.746 mo
152.694 192.446 li
152.994 192.446 li
152.994 198.746 li
cp
.248692 0 .257237 0 cmyk
ef
174.894 198.846 mo
174.894 192.446 li
175.194 192.446 li
175.194 198.846 li
cp
ef
152.994 198.746 mo
152.994 192.446 li
153.394 192.446 li
153.394 198.746 li
cp
.244236 0 .251469 0 cmyk
ef
174.594 198.846 mo
174.594 192.446 li
174.894 192.446 li
174.894 198.846 li
cp
ef
153.394 198.746 mo
153.394 192.446 li
153.694 192.446 li
153.694 198.746 li
cp
.23975 0 .247807 0 cmyk
ef
174.194 198.846 mo
174.194 192.446 li
174.594 192.446 li
174.594 198.846 li
cp
ef
153.694 198.746 mo
153.694 192.446 li
153.994 192.446 li
153.994 198.746 li
cp
.235843 0 .24213 0 cmyk
ef
173.894 198.846 mo
173.894 192.446 li
174.194 192.446 li
174.194 198.846 li
cp
ef
153.994 198.746 mo
153.994 192.446 li
154.294 192.446 li
154.294 198.746 li
cp
.232029 0 .236851 0 cmyk
ef
173.594 198.846 mo
173.594 192.446 li
173.894 192.446 li
173.894 198.846 li
cp
ef
154.294 198.746 mo
154.294 192.446 li
154.694 192.446 li
154.694 198.746 li
cp
.227543 0 .233005 0 cmyk
ef
173.194 198.846 mo
173.194 192.446 li
173.594 192.446 li
173.594 198.846 li
cp
ef
154.694 198.746 mo
154.694 192.446 li
154.994 192.446 li
154.994 198.746 li
cp
.223545 0 .228428 0 cmyk
ef
172.894 198.846 mo
172.894 192.446 li
173.194 192.446 li
173.194 198.846 li
cp
ef
154.994 198.746 mo
154.994 192.446 li
155.294 192.446 li
155.294 198.746 li
cp
.219211 0 .224491 0 cmyk
ef
172.594 198.846 mo
172.594 192.446 li
172.894 192.446 li
172.894 198.846 li
cp
ef
155.294 198.746 mo
155.294 192.446 li
155.694 192.446 li
155.694 198.746 li
cp
.215702 0 .223941 0 cmyk
ef
172.194 198.846 mo
172.194 192.446 li
172.594 192.446 li
172.594 198.846 li
cp
ef
155.694 198.746 mo
155.694 192.446 li
155.994 192.446 li
155.994 198.746 li
cp
.211887 0 .218326 0 cmyk
ef
171.894 198.746 mo
171.894 192.446 li
172.194 192.446 li
172.194 198.846 li
cp
ef
155.994 198.746 mo
155.994 192.446 li
156.294 192.446 li
156.294 198.746 li
cp
.208194 0 .214969 0 cmyk
ef
171.594 198.746 mo
171.594 192.446 li
171.894 192.446 li
171.894 198.746 li
cp
ef
156.294 198.746 mo
156.294 192.446 li
156.694 192.446 li
156.694 198.746 li
cp
.203861 0 .20914 0 cmyk
ef
171.194 198.746 mo
171.194 192.446 li
171.594 192.446 li
171.594 198.746 li
cp
ef
156.694 198.746 mo
156.694 192.446 li
156.994 192.446 li
156.994 198.746 li
cp
.199466 0 .202976 0 cmyk
ef
170.894 198.746 mo
170.894 192.446 li
171.194 192.446 li
171.194 198.746 li
cp
ef
156.994 198.746 mo
156.994 192.446 li
157.394 192.446 li
157.394 198.746 li
cp
.194766 0 .199222 0 cmyk
ef
170.594 198.746 mo
170.594 192.446 li
170.894 192.446 li
170.894 198.746 li
cp
ef
157.394 198.746 mo
157.394 192.446 li
157.694 192.446 li
157.694 198.746 li
cp
.190097 0 .19324 0 cmyk
ef
170.294 198.746 mo
170.294 192.446 li
170.594 192.446 li
170.594 198.746 li
cp
ef
157.694 198.746 mo
157.694 192.446 li
157.994 192.446 li
157.994 198.746 li
cp
.18558 0 .189456 0 cmyk
ef
169.894 198.746 mo
169.894 192.446 li
170.294 192.446 li
170.294 198.746 li
cp
ef
157.994 198.746 mo
157.994 192.446 li
158.294 192.446 li
158.294 198.746 li
cp
.181369 0 .184024 0 cmyk
ef
169.594 198.746 mo
169.594 192.446 li
169.894 192.446 li
169.894 198.746 li
cp
ef
158.294 198.746 mo
158.294 192.446 li
158.694 192.446 li
158.694 198.746 li
cp
.176822 0 .178927 0 cmyk
ef
169.294 198.746 mo
169.294 192.446 li
169.594 192.446 li
169.594 198.746 li
cp
ef
158.694 198.746 mo
158.694 192.446 li
158.994 192.446 li
158.994 198.746 li
cp
.172122 0 .175479 0 cmyk
ef
168.894 198.746 mo
168.894 192.446 li
169.294 192.446 li
169.294 198.746 li
cp
ef
158.994 198.746 mo
158.994 192.446 li
159.294 192.446 li
159.294 198.746 li
cp
.167727 0 .171023 0 cmyk
ef
168.594 198.746 mo
168.594 192.446 li
168.894 192.446 li
168.894 198.746 li
cp
ef
159.294 198.746 mo
159.294 192.446 li
159.594 192.446 li
159.594 198.746 li
cp
.163485 0 .167544 0 cmyk
ef
168.294 198.746 mo
168.294 192.446 li
168.594 192.446 li
168.594 198.746 li
cp
ef
159.594 198.746 mo
159.594 192.446 li
159.994 192.446 li
159.994 198.746 li
cp
.159762 0 .166903 0 cmyk
ef
167.894 198.746 mo
167.894 192.446 li
168.294 192.446 li
168.294 198.746 li
cp
ef
159.994 198.746 mo
159.994 192.446 li
160.294 192.446 li
160.294 198.746 li
cp
.15671 0 .16199 0 cmyk
ef
167.594 198.746 mo
167.594 192.446 li
167.894 192.446 li
167.894 198.746 li
cp
ef
160.294 198.746 mo
160.294 192.446 li
160.694 192.446 li
160.694 198.746 li
cp
.15198 0 .158785 0 cmyk
ef
167.294 198.746 mo
167.294 192.446 li
167.594 192.446 li
167.594 198.746 li
cp
ef
160.694 198.746 mo
160.694 192.446 li
160.994 192.446 li
160.994 198.746 li
cp
.147494 0 .153017 0 cmyk
ef
166.894 198.746 mo
166.894 192.446 li
167.294 192.446 li
167.294 198.746 li
cp
ef
160.994 198.746 mo
160.994 192.446 li
161.294 192.446 li
161.294 198.746 li
cp
.143069 0 .146975 0 cmyk
ef
166.594 198.746 mo
166.594 192.446 li
166.894 192.446 li
166.894 198.746 li
cp
ef
161.294 198.746 mo
161.294 192.446 li
161.694 192.446 li
161.694 198.746 li
cp
.138125 0 .142977 0 cmyk
ef
166.294 198.746 mo
166.294 192.446 li
166.594 192.446 li
166.594 198.746 li
cp
ef
161.694 198.746 mo
161.694 192.446 li
161.994 192.446 li
161.994 198.746 li
cp
.133516 0 .136843 0 cmyk
ef
165.894 198.746 mo
165.894 192.446 li
166.294 192.446 li
166.294 198.746 li
cp
ef
161.994 198.746 mo
161.994 192.446 li
162.294 192.446 li
162.294 198.746 li
cp
.128756 0 .132662 0 cmyk
ef
165.594 198.746 mo
165.594 192.446 li
165.894 192.446 li
165.894 198.746 li
cp
ef
162.294 198.746 mo
162.294 192.446 li
162.694 192.446 li
162.694 198.746 li
cp
.124544 0 .127016 0 cmyk
ef
165.294 198.746 mo
165.294 192.446 li
165.594 192.446 li
165.594 198.746 li
cp
ef
162.694 198.746 mo
162.694 192.446 li
162.994 192.446 li
162.994 198.746 li
cp
.119936 0 .121096 0 cmyk
ef
164.994 198.746 mo
164.994 192.446 li
165.294 192.446 li
165.294 198.746 li
cp
ef
162.994 198.746 mo
162.994 192.446 li
163.294 192.446 li
163.294 198.746 li
cp
.113588 0 .115938 0 cmyk
ef
164.594 198.746 mo
164.594 192.446 li
164.994 192.446 li
164.994 198.746 li
cp
ef
163.294 198.746 mo
163.294 192.446 li
163.594 192.446 li
163.594 198.746 li
cp
.108553 0 .109529 0 cmyk
ef
164.294 198.746 mo
164.294 192.446 li
164.594 192.446 li
164.594 198.746 li
cp
ef
163.594 198.746 mo
163.594 192.446 li
164.294 192.446 li
164.294 198.746 li
cp
.0977188 0 .105287 0 cmyk
ef
grestore
150.694 192.546 mo
150.694 195.646 157.394 198.746 163.994 198.746 cv
170.594 198.746 177.194 195.646 177.194 192.546 cv
@
gsave
163.894 186.446 mo
166.594 186.546 li
169.094 186.946 li
170.294 187.146 li
171.394 187.446 li
172.394 187.846 li
173.294 188.146 li
174.194 188.646 li
174.894 189.146 li
175.594 189.646 li
176.094 190.146 li
176.594 190.746 li
176.694 191.046 li
176.894 191.346 li
176.994 191.646 li
177.094 191.946 li
177.094 192.146 li
177.094 192.646 li
177.094 192.946 li
177.094 193.146 li
176.994 193.546 li
176.894 193.946 li
176.694 194.146 li
176.594 194.446 li
176.094 195.046 li
175.594 195.646 li
174.894 196.146 li
174.194 196.646 li
173.294 197.046 li
172.394 197.446 li
171.394 197.746 li
170.294 198.046 li
169.094 198.346 li
166.594 198.746 li
163.894 198.846 li
161.194 198.746 li
158.694 198.346 li
157.494 198.046 li
156.494 197.746 li
155.394 197.446 li
154.494 197.046 li
153.594 196.646 li
152.894 196.146 li
152.294 195.646 li
151.694 195.046 li
151.294 194.446 li
151.094 194.146 li
150.994 193.946 li
150.894 193.546 li
150.894 193.146 li
150.694 192.946 li
150.694 192.646 li
150.694 192.146 li
150.894 191.946 li
150.894 191.646 li
150.994 191.346 li
151.094 191.046 li
151.294 190.746 li
151.694 190.146 li
152.294 189.646 li
152.894 189.146 li
153.594 188.646 li
154.494 188.146 li
155.394 187.846 li
156.494 187.446 li
157.494 187.146 li
158.694 186.946 li
161.194 186.546 li
163.894 186.446 li
cp
eclp
150.694 186.346 mo
177.194 186.346 li
177.194 187.646 li
150.694 187.646 li
cp
.273503 0 .280705 0 cmyk
ef
150.694 187.646 mo
177.194 187.646 li
177.194 187.846 li
150.694 187.846 li
cp
ef
150.694 187.846 mo
177.194 187.846 li
177.194 188.146 li
150.694 188.146 li
cp
.269963 0 .280308 0 cmyk
ef
150.694 188.146 mo
177.194 188.146 li
177.194 188.446 li
150.694 188.446 li
cp
.265965 0 .275029 0 cmyk
ef
150.694 188.446 mo
177.194 188.446 li
177.194 188.746 li
150.694 188.746 li
cp
.262242 0 .271885 0 cmyk
ef
150.694 188.746 mo
177.194 188.746 li
177.194 189.046 li
150.694 189.046 li
cp
.257816 0 .266728 0 cmyk
ef
150.694 189.046 mo
177.194 189.046 li
177.194 189.346 li
150.694 189.346 li
cp
.253483 0 .260929 0 cmyk
ef
150.694 189.346 mo
177.194 189.346 li
177.194 189.646 li
150.694 189.646 li
cp
.248692 0 .257237 0 cmyk
ef
150.694 189.646 mo
177.194 189.646 li
177.194 189.946 li
150.694 189.946 li
cp
.244236 0 .251469 0 cmyk
ef
150.694 189.946 mo
177.194 189.946 li
177.194 190.146 li
150.694 190.146 li
cp
.23975 0 .247807 0 cmyk
ef
150.694 190.146 mo
177.194 190.146 li
177.194 190.446 li
150.694 190.446 li
cp
.235843 0 .24213 0 cmyk
ef
150.694 190.446 mo
177.194 190.446 li
177.194 190.746 li
150.694 190.746 li
cp
.232029 0 .236851 0 cmyk
ef
150.694 190.746 mo
177.194 190.746 li
177.194 191.046 li
150.694 191.046 li
cp
.227543 0 .233005 0 cmyk
ef
150.694 191.046 mo
177.194 191.046 li
177.194 191.346 li
150.694 191.346 li
cp
.223545 0 .228428 0 cmyk
ef
150.694 191.346 mo
177.194 191.346 li
177.194 191.646 li
150.694 191.646 li
cp
.219211 0 .224491 0 cmyk
ef
150.694 191.646 mo
177.194 191.646 li
177.194 191.946 li
150.694 191.946 li
cp
.215641 0 .218753 0 cmyk
ef
150.694 191.946 mo
177.194 191.946 li
177.194 192.246 li
150.694 192.246 li
cp
.211704 0 .213291 0 cmyk
ef
150.694 192.246 mo
177.194 192.246 li
177.194 192.446 li
150.694 192.446 li
cp
.208011 0 .209628 0 cmyk
ef
150.694 192.446 mo
177.194 192.446 li
177.194 192.746 li
150.694 192.746 li
cp
.203555 0 .203464 0 cmyk
ef
150.694 192.746 mo
177.194 192.746 li
177.194 193.046 li
150.694 193.046 li
cp
.198886 0 .19971 0 cmyk
ef
150.694 193.046 mo
177.194 193.046 li
177.194 193.346 li
150.694 193.346 li
cp
.190097 0 .19324 0 cmyk
ef
150.694 193.346 mo
177.194 193.346 li
177.194 193.646 li
150.694 193.646 li
cp
.186069 0 .192691 0 cmyk
ef
150.694 193.646 mo
177.194 193.646 li
177.194 193.946 li
150.694 193.946 li
cp
.181888 0 .188937 0 cmyk
ef
150.694 193.946 mo
177.194 193.946 li
177.194 194.246 li
150.694 194.246 li
cp
.177523 0 .183536 0 cmyk
ef
150.694 194.246 mo
177.194 194.246 li
177.194 194.546 li
150.694 194.546 li
cp
.172854 0 .180301 0 cmyk
ef
150.694 194.546 mo
177.194 194.546 li
177.194 194.746 li
150.694 194.746 li
cp
.168032 0 .174899 0 cmyk
ef
150.694 194.746 mo
177.194 194.746 li
177.194 195.046 li
150.694 195.046 li
cp
.163882 0 .170352 0 cmyk
ef
150.694 195.046 mo
177.194 195.046 li
177.194 195.346 li
150.694 195.346 li
cp
.159762 0 .166903 0 cmyk
ef
150.694 195.346 mo
177.194 195.346 li
177.194 195.646 li
150.694 195.646 li
cp
.15671 0 .16199 0 cmyk
ef
150.694 195.646 mo
177.194 195.646 li
177.194 195.946 li
150.694 195.946 li
cp
.15198 0 .158785 0 cmyk
ef
150.694 195.946 mo
177.194 195.946 li
177.194 196.246 li
150.694 196.246 li
cp
.147494 0 .153017 0 cmyk
ef
150.694 196.246 mo
177.194 196.246 li
177.194 196.546 li
150.694 196.546 li
cp
.143069 0 .146975 0 cmyk
ef
150.694 196.546 mo
177.194 196.546 li
177.194 196.846 li
150.694 196.846 li
cp
.138125 0 .142977 0 cmyk
ef
150.694 196.846 mo
177.194 196.846 li
177.194 197.146 li
150.694 197.146 li
cp
.133516 0 .136843 0 cmyk
ef
150.694 197.146 mo
177.194 197.146 li
177.194 197.346 li
150.694 197.346 li
cp
.128756 0 .132662 0 cmyk
ef
150.694 197.346 mo
177.194 197.346 li
177.194 197.646 li
150.694 197.646 li
cp
.124544 0 .127016 0 cmyk
ef
150.694 197.646 mo
177.194 197.646 li
177.194 197.946 li
150.694 197.946 li
cp
.119936 0 .121096 0 cmyk
ef
150.694 197.946 mo
177.194 197.946 li
177.194 198.246 li
150.694 198.246 li
cp
.113588 0 .115938 0 cmyk
ef
150.694 198.246 mo
177.194 198.246 li
177.194 198.546 li
150.694 198.546 li
cp
.108553 0 .109529 0 cmyk
ef
150.694 198.546 mo
177.194 198.546 li
177.194 198.846 li
150.694 198.846 li
cp
.0977188 0 .105287 0 cmyk
ef
grestore
163.994 186.346 mo
171.394 186.346 177.194 189.046 177.194 192.546 cv
177.194 196.046 171.394 198.746 163.994 198.746 cv
156.494 198.746 150.694 196.046 150.694 192.546 cv
150.694 189.046 156.494 186.346 163.994 186.346 cv
cp
@
294.794 170.246 mo
298.794 170.246 301.894 173.346 301.894 177.346 cv
301.894 181.446 298.794 184.446 294.794 184.446 cv
290.794 184.446 287.694 181.446 287.694 177.346 cv
287.694 173.346 290.794 170.246 294.794 170.246 cv
cp
0 0 0 0 cmyk
ef
3 lw
294.794 170.246 mo
298.794 170.246 301.894 173.346 301.894 177.346 cv
301.894 181.446 298.794 184.446 294.794 184.446 cv
290.794 184.446 287.694 181.446 287.694 177.346 cv
287.694 173.346 290.794 170.246 294.794 170.246 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
294.794 198.646 mo
298.794 198.646 301.894 201.746 301.894 205.746 cv
301.894 209.746 298.794 212.846 294.794 212.846 cv
290.794 212.846 287.694 209.746 287.694 205.746 cv
287.694 201.746 290.794 198.646 294.794 198.646 cv
cp
0 0 0 0 cmyk
ef
294.794 198.646 mo
298.794 198.646 301.894 201.746 301.894 205.746 cv
301.894 209.746 298.794 212.846 294.794 212.846 cv
290.794 212.846 287.694 209.746 287.694 205.746 cv
287.694 201.746 290.794 198.646 294.794 198.646 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
294.794 226.946 mo
298.794 226.946 301.894 230.046 301.894 234.046 cv
301.894 238.146 298.794 241.146 294.794 241.146 cv
290.794 241.146 287.694 238.146 287.694 234.046 cv
287.694 230.046 290.794 226.946 294.794 226.946 cv
cp
0 0 0 0 cmyk
ef
294.794 226.946 mo
298.794 226.946 301.894 230.046 301.894 234.046 cv
301.894 238.146 298.794 241.146 294.794 241.146 cv
290.794 241.146 287.694 238.146 287.694 234.046 cv
287.694 230.046 290.794 226.946 294.794 226.946 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
331.694 156.146 mo
335.694 156.146 338.694 159.146 338.694 163.246 cv
338.694 167.246 335.694 170.246 331.694 170.246 cv
327.594 170.246 324.594 167.246 324.594 163.246 cv
324.594 159.146 327.594 156.146 331.694 156.146 cv
cp
0 0 0 0 cmyk
ef
331.694 156.146 mo
335.694 156.146 338.694 159.146 338.694 163.246 cv
338.694 167.246 335.694 170.246 331.694 170.246 cv
327.594 170.246 324.594 167.246 324.594 163.246 cv
324.594 159.146 327.594 156.146 331.694 156.146 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
331.694 184.446 mo
335.694 184.446 338.694 187.546 338.694 191.546 cv
338.694 195.546 335.694 198.646 331.694 198.646 cv
327.594 198.646 324.594 195.546 324.594 191.546 cv
324.594 187.546 327.594 184.446 331.694 184.446 cv
cp
0 0 0 0 cmyk
ef
331.694 184.446 mo
335.694 184.446 338.694 187.546 338.694 191.546 cv
338.694 195.546 335.694 198.646 331.694 198.646 cv
327.594 198.646 324.594 195.546 324.594 191.546 cv
324.594 187.546 327.594 184.446 331.694 184.446 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
331.694 212.846 mo
335.694 212.846 338.694 215.846 338.694 219.946 cv
338.694 223.946 335.694 226.946 331.694 226.946 cv
327.594 226.946 324.594 223.946 324.594 219.946 cv
324.594 215.846 327.594 212.846 331.694 212.846 cv
cp
0 0 0 0 cmyk
ef
331.694 212.846 mo
335.694 212.846 338.694 215.846 338.694 219.946 cv
338.694 223.946 335.694 226.946 331.694 226.946 cv
327.594 226.946 324.594 223.946 324.594 219.946 cv
324.594 215.846 327.594 212.846 331.694 212.846 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
331.694 241.146 mo
335.694 241.146 338.694 244.246 338.694 248.246 cv
338.694 252.246 335.694 255.346 331.694 255.346 cv
327.594 255.346 324.594 252.246 324.594 248.246 cv
324.594 244.246 327.594 241.146 331.694 241.146 cv
cp
0 0 0 0 cmyk
ef
331.694 241.146 mo
335.694 241.146 338.694 244.246 338.694 248.246 cv
338.694 252.246 335.694 255.346 331.694 255.346 cv
327.594 255.346 324.594 252.246 324.594 248.246 cv
324.594 244.246 327.594 241.146 331.694 241.146 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
365.694 184.446 mo
369.694 184.446 372.794 187.546 372.794 191.546 cv
372.794 195.546 369.694 198.646 365.694 198.646 cv
361.594 198.646 358.594 195.546 358.594 191.546 cv
358.594 187.546 361.594 184.446 365.694 184.446 cv
cp
0 0 0 0 cmyk
ef
365.694 184.446 mo
369.694 184.446 372.794 187.546 372.794 191.546 cv
372.794 195.546 369.694 198.646 365.694 198.646 cv
361.594 198.646 358.594 195.546 358.594 191.546 cv
358.594 187.546 361.594 184.446 365.694 184.446 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
365.694 212.846 mo
369.694 212.846 372.794 215.846 372.794 219.946 cv
372.794 223.946 369.694 226.946 365.694 226.946 cv
361.594 226.946 358.594 223.946 358.594 219.946 cv
358.594 215.846 361.594 212.846 365.694 212.846 cv
cp
0 0 0 0 cmyk
ef
365.694 212.846 mo
369.694 212.846 372.794 215.846 372.794 219.946 cv
372.794 223.946 369.694 226.946 365.694 226.946 cv
361.594 226.946 358.594 223.946 358.594 219.946 cv
358.594 215.846 361.594 212.846 365.694 212.846 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
.99 lw
301.894 177.346 mo
324.594 163.246 li
@
2.292 lw
301.894 177.346 mo
324.594 191.546 li
@
0 lw
301.894 177.346 mo
324.594 219.946 li
@
301.894 177.346 mo
324.594 248.246 li
@
1.5 lw
301.894 205.746 mo
324.594 163.246 li
@
2.292 lw
301.894 205.746 mo
324.594 191.546 li
@
299.794 210.746 mo
324.594 219.946 li
@
301.894 205.746 mo
324.594 248.246 li
@
1.5 lw
301.894 234.046 mo
324.594 163.246 li
@
0 lw
301.894 234.046 mo
324.594 191.546 li
@
301.894 234.046 mo
324.594 219.946 li
@
301.894 234.046 mo
324.594 248.246 li
@
1.5 lw
338.694 163.246 mo
358.594 191.546 li
@
.99 lw
338.694 191.546 mo
358.594 191.546 li
@
0 lw
338.694 219.946 mo
358.594 191.546 li
@
.99 lw
338.694 248.246 mo
358.594 191.546 li
@
1.5 lw
338.694 219.946 mo
358.594 219.946 li
@
0 lw
338.694 248.246 mo
358.594 219.946 li
@
338.694 191.546 mo
358.594 219.946 li
@
2.292 lw
338.694 163.246 mo
358.594 219.946 li
@
1.5 lw
55.294 137.946 mo
138.594 73.646 li
0 .728176 .911833 0 cmyk
@
150.694 64.246 mo
134.694 69.8459 li
141.294 78.3459 li
150.694 64.246 li
cp
ef
55.294 137.946 mo
138.194 197.046 li
@
150.694 205.946 mo
140.694 192.246 li
134.494 200.946 li
150.694 205.946 li
cp
ef
177.194 64.246 mo
271.894 64.046 li
@
287.294 64.046 mo
271.194 58.646 li
271.194 69.446 li
287.294 64.046 li
cp
ef
177.194 205.946 mo
272.294 205.746 li
@
287.694 205.746 mo
271.594 200.446 li
271.594 211.146 li
287.694 205.746 li
cp
ef
442.194 104.246 mo
446.194 104.246 449.294 107.246 449.294 111.346 cv
449.294 115.346 446.194 118.346 442.194 118.346 cv
438.194 118.346 435.094 115.346 435.094 111.346 cv
435.094 107.246 438.194 104.246 442.194 104.246 cv
cp
0 0 0 0 cmyk
ef
3 lw
442.194 104.246 mo
446.194 104.246 449.294 107.246 449.294 111.346 cv
449.294 115.346 446.194 118.346 442.194 118.346 cv
438.194 118.346 435.094 115.346 435.094 111.346 cv
435.094 107.246 438.194 104.246 442.194 104.246 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
442.194 132.546 mo
446.194 132.546 449.294 135.646 449.294 139.646 cv
449.294 143.646 446.194 146.746 442.194 146.746 cv
438.194 146.746 435.094 143.646 435.094 139.646 cv
435.094 135.646 438.194 132.546 442.194 132.546 cv
cp
0 0 0 0 cmyk
ef
442.194 132.546 mo
446.194 132.546 449.294 135.646 449.294 139.646 cv
449.294 143.646 446.194 146.746 442.194 146.746 cv
438.194 146.746 435.094 143.646 435.094 139.646 cv
435.094 135.646 438.194 132.546 442.194 132.546 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
442.194 160.946 mo
446.194 160.946 449.294 163.946 449.294 168.046 cv
449.294 172.046 446.194 175.046 442.194 175.046 cv
438.194 175.046 435.094 172.046 435.094 168.046 cv
435.094 163.946 438.194 160.946 442.194 160.946 cv
cp
0 0 0 0 cmyk
ef
442.194 160.946 mo
446.194 160.946 449.294 163.946 449.294 168.046 cv
449.294 172.046 446.194 175.046 442.194 175.046 cv
438.194 175.046 435.094 172.046 435.094 168.046 cv
435.094 163.946 438.194 160.946 442.194 160.946 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
479.094 90.046 mo
483.094 90.046 486.094 93.146 486.094 97.146 cv
486.094 101.146 483.094 104.246 479.094 104.246 cv
474.994 104.246 471.994 101.146 471.994 97.146 cv
471.994 93.146 474.994 90.046 479.094 90.046 cv
cp
0 0 0 0 cmyk
ef
479.094 90.046 mo
483.094 90.046 486.094 93.146 486.094 97.146 cv
486.094 101.146 483.094 104.246 479.094 104.246 cv
474.994 104.246 471.994 101.146 471.994 97.146 cv
471.994 93.146 474.994 90.046 479.094 90.046 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
479.094 118.346 mo
483.094 118.346 486.094 121.446 486.094 125.446 cv
486.094 129.546 483.094 132.546 479.094 132.546 cv
474.994 132.546 471.994 129.546 471.994 125.446 cv
471.994 121.446 474.994 118.346 479.094 118.346 cv
cp
0 0 0 0 cmyk
ef
479.094 118.346 mo
483.094 118.346 486.094 121.446 486.094 125.446 cv
486.094 129.546 483.094 132.546 479.094 132.546 cv
474.994 132.546 471.994 129.546 471.994 125.446 cv
471.994 121.446 474.994 118.346 479.094 118.346 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
479.094 146.746 mo
483.094 146.746 486.094 149.846 486.094 153.846 cv
486.094 157.846 483.094 160.946 479.094 160.946 cv
474.994 160.946 471.994 157.846 471.994 153.846 cv
471.994 149.846 474.994 146.746 479.094 146.746 cv
cp
0 0 0 0 cmyk
ef
479.094 146.746 mo
483.094 146.746 486.094 149.846 486.094 153.846 cv
486.094 157.846 483.094 160.946 479.094 160.946 cv
474.994 160.946 471.994 157.846 471.994 153.846 cv
471.994 149.846 474.994 146.746 479.094 146.746 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
479.094 175.046 mo
483.094 175.046 486.094 178.146 486.094 182.146 cv
486.094 186.146 483.094 189.246 479.094 189.246 cv
474.994 189.246 471.994 186.146 471.994 182.146 cv
471.994 178.146 474.994 175.046 479.094 175.046 cv
cp
0 0 0 0 cmyk
ef
479.094 175.046 mo
483.094 175.046 486.094 178.146 486.094 182.146 cv
486.094 186.146 483.094 189.246 479.094 189.246 cv
474.994 189.246 471.994 186.146 471.994 182.146 cv
471.994 178.146 474.994 175.046 479.094 175.046 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
513.094 118.346 mo
517.094 118.346 520.194 121.446 520.194 125.446 cv
520.194 129.546 517.094 132.546 513.094 132.546 cv
508.994 132.546 505.994 129.546 505.994 125.446 cv
505.994 121.446 508.994 118.346 513.094 118.346 cv
cp
0 0 0 0 cmyk
ef
513.094 118.346 mo
517.094 118.346 520.194 121.446 520.194 125.446 cv
520.194 129.546 517.094 132.546 513.094 132.546 cv
508.994 132.546 505.994 129.546 505.994 125.446 cv
505.994 121.446 508.994 118.346 513.094 118.346 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
513.094 146.746 mo
517.094 146.746 520.194 149.846 520.194 153.846 cv
520.194 157.846 517.094 160.946 513.094 160.946 cv
508.994 160.946 505.994 157.846 505.994 153.846 cv
505.994 149.846 508.994 146.746 513.094 146.746 cv
cp
0 0 0 0 cmyk
ef
513.094 146.746 mo
517.094 146.746 520.194 149.846 520.194 153.846 cv
520.194 157.846 517.094 160.946 513.094 160.946 cv
508.994 160.946 505.994 157.846 505.994 153.846 cv
505.994 149.846 508.994 146.746 513.094 146.746 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
.99 lw
449.294 111.346 mo
471.994 97.146 li
@
2.292 lw
449.294 111.346 mo
471.994 125.446 li
@
0 lw
449.294 111.346 mo
471.994 153.846 li
@
449.294 111.346 mo
471.994 182.146 li
@
1.5 lw
449.294 139.646 mo
471.994 97.146 li
@
2.292 lw
449.294 139.646 mo
471.994 125.446 li
@
447.194 144.646 mo
471.994 153.846 li
@
449.294 139.646 mo
471.994 182.146 li
@
1.5 lw
449.294 168.046 mo
471.994 97.146 li
@
0 lw
449.294 168.046 mo
471.994 125.446 li
@
449.294 168.046 mo
471.994 153.846 li
@
449.294 168.046 mo
471.994 182.146 li
@
1.5 lw
486.094 97.146 mo
505.994 125.446 li
@
.99 lw
486.094 125.446 mo
505.994 125.446 li
@
0 lw
486.094 153.846 mo
505.994 125.446 li
@
.99 lw
486.094 182.146 mo
505.994 125.446 li
@
1.5 lw
486.094 153.846 mo
505.994 153.846 li
@
0 lw
486.094 182.146 mo
505.994 153.846 li
@
486.094 125.446 mo
505.994 153.846 li
@
2.292 lw
486.094 97.146 mo
505.994 153.846 li
@
1.5 lw
372.294 64.046 mo
387.994 64.046 li
406.794 139.646 li
419.694 139.646 li
0 .728176 .911833 0 cmyk
@
435.094 139.646 mo
418.994 134.246 li
418.994 145.046 li
435.094 139.646 li
cp
ef
372.794 205.746 mo
388.394 205.746 li
406.794 139.646 li
419.694 139.646 li
@
435.094 139.646 mo
418.994 134.246 li
418.994 145.046 li
435.094 139.646 li
cp
ef
gsave
590.494 126.446 mo
590.594 126.146 li
590.594 125.946 li
590.694 125.646 li
590.894 125.346 li
590.994 125.046 li
591.194 124.746 li
591.694 124.146 li
592.294 123.646 li
592.994 123.146 li
593.894 122.646 li
594.694 122.146 li
595.594 121.846 li
596.594 121.446 li
597.894 121.146 li
598.894 120.846 li
599.994 120.646 li
601.294 120.446 li
602.494 120.346 li
603.694 120.346 li
604.994 120.346 li
606.194 120.446 li
607.394 120.646 li
608.594 120.846 li
609.694 121.146 li
610.894 121.446 li
611.894 121.846 li
612.894 122.146 li
613.694 122.646 li
614.494 123.146 li
615.194 123.646 li
615.894 124.146 li
616.294 124.746 li
616.494 125.046 li
616.694 125.346 li
616.894 125.646 li
616.894 125.946 li
616.894 126.146 li
616.994 126.446 li
616.994 153.346 li
616.894 153.546 li
616.894 153.846 li
616.894 154.146 li
616.694 154.446 li
616.494 154.746 li
616.294 155.046 li
615.894 155.546 li
615.194 156.146 li
614.494 156.646 li
613.694 157.146 li
612.894 157.546 li
611.894 157.946 li
610.894 158.346 li
609.694 158.646 li
608.594 158.946 li
607.394 159.146 li
606.194 159.346 li
604.994 159.446 li
603.694 159.446 li
602.494 159.446 li
601.294 159.346 li
599.994 159.146 li
598.894 158.946 li
597.894 158.646 li
596.594 158.346 li
595.594 157.946 li
594.694 157.546 li
593.894 157.146 li
592.994 156.646 li
592.294 156.146 li
591.694 155.546 li
591.194 155.046 li
590.994 154.746 li
590.894 154.446 li
590.694 154.146 li
590.594 153.846 li
590.594 153.546 li
590.494 153.346 li
590.494 126.446 li
cp
eclp
590.494 159.446 mo
590.494 120.146 li
591.094 120.146 li
590.994 159.446 li
cp
.420386 0 .974212 0 cmyk
ef
590.994 159.446 mo
591.094 120.146 li
591.594 120.146 li
591.594 159.446 li
cp
.427161 0 .972259 0 cmyk
ef
591.594 159.446 mo
591.594 120.146 li
592.194 120.146 li
592.194 159.446 li
cp
.431708 0 .966522 0 cmyk
ef
592.194 159.446 mo
592.194 120.146 li
592.794 120.146 li
592.694 159.446 li
cp
.438331 0 .962524 0 cmyk
ef
592.694 159.446 mo
592.794 120.146 li
593.394 120.146 li
593.294 159.446 li
cp
.442512 0 .959045 0 cmyk
ef
593.294 159.446 mo
593.394 120.146 li
593.894 120.146 li
593.894 159.446 li
cp
.448218 0 .959258 0 cmyk
ef
593.894 159.446 mo
593.894 120.146 li
594.494 120.146 li
594.394 159.446 li
cp
.453529 0 .955047 0 cmyk
ef
594.394 159.446 mo
594.494 120.146 li
595.094 120.146 li
594.994 159.446 li
cp
.461952 0 .957458 0 cmyk
ef
594.994 159.446 mo
595.094 120.146 li
595.594 120.146 li
595.594 159.446 li
cp
.467567 0 .958404 0 cmyk
ef
595.594 159.446 mo
595.594 120.146 li
596.194 120.246 li
596.094 159.446 li
cp
.471748 0 .958434 0 cmyk
ef
596.094 159.446 mo
596.194 120.246 li
596.794 120.246 li
596.694 159.446 li
cp
.476631 0 .962463 0 cmyk
ef
596.694 159.446 mo
596.794 120.246 li
597.294 120.246 li
597.294 159.446 li
cp
.480781 0 .96347 0 cmyk
ef
597.294 159.446 mo
597.294 120.246 li
597.894 120.246 li
597.794 159.446 li
cp
.487709 0 .966461 0 cmyk
ef
597.794 159.446 mo
597.894 120.246 li
598.494 120.246 li
598.394 159.446 li
cp
.492622 0 .968536 0 cmyk
ef
598.394 159.446 mo
598.494 120.246 li
598.994 120.246 li
598.994 159.446 li
cp
.497566 0 .971954 0 cmyk
ef
598.994 159.446 mo
598.994 120.246 li
599.594 120.246 li
599.494 159.446 li
cp
.502617 0 .973968 0 cmyk
ef
599.494 159.446 mo
599.594 120.246 li
600.194 120.246 li
600.094 159.446 li
cp
.507317 0 .975494 0 cmyk
ef
600.094 159.446 mo
600.194 120.246 li
600.694 120.246 li
600.694 159.446 li
cp
.514061 0 .976898 0 cmyk
ef
600.694 159.446 mo
600.694 120.246 li
601.294 120.246 li
601.194 159.446 li
cp
.519066 0 .97705 0 cmyk
ef
601.194 159.446 mo
601.294 120.246 li
601.894 120.246 li
601.794 159.446 li
cp
.52459 0 .981262 0 cmyk
ef
601.794 159.446 mo
601.894 120.246 li
602.394 120.246 li
602.394 159.446 li
cp
.52929 0 .981567 0 cmyk
ef
602.394 159.446 mo
602.394 120.246 li
602.994 120.246 li
602.894 159.446 li
cp
.536431 0 .982818 0 cmyk
ef
602.894 159.446 mo
602.994 120.246 li
603.594 120.246 li
603.494 159.446 li
cp
.541588 0 .984741 0 cmyk
ef
603.494 159.446 mo
603.594 120.246 li
604.094 120.246 li
604.094 159.446 li
cp
.545953 0 .987579 0 cmyk
ef
604.094 159.446 mo
604.094 120.246 li
604.694 120.246 li
604.594 159.446 li
cp
.553674 0 .990784 0 cmyk
ef
604.594 159.446 mo
604.694 120.246 li
605.294 120.246 li
605.194 159.446 li
cp
.557763 0 .99234 0 cmyk
ef
605.194 159.446 mo
605.294 120.246 li
605.794 120.246 li
605.794 159.446 li
cp
.563836 0 .994812 0 cmyk
ef
605.794 159.446 mo
605.794 120.246 li
606.394 120.246 li
606.294 159.446 li
cp
.567926 0 .997864 0 cmyk
ef
606.294 159.446 mo
606.394 120.246 li
606.994 120.246 li
606.894 159.446 li
cp
.573785 0 1 0 cmyk
ef
606.894 159.446 mo
606.994 120.246 li
607.494 120.246 li
607.494 159.446 li
cp
.578088 0 1 0 cmyk
ef
607.494 159.446 mo
607.494 120.246 li
608.094 120.246 li
607.994 159.446 li
cp
.58407 0 1 0 cmyk
ef
607.994 159.446 mo
608.094 120.246 li
608.694 120.246 li
608.594 159.446 li
cp
.587366 0 1 0 cmyk
ef
608.594 159.446 mo
608.694 120.246 li
609.194 120.246 li
609.194 159.446 li
cp
.591852 0 1 0 cmyk
ef
609.194 159.446 mo
609.194 120.246 li
609.794 120.246 li
609.694 159.446 li
cp
.598077 0 1 0 cmyk
ef
609.694 159.446 mo
609.794 120.246 li
610.394 120.246 li
610.294 159.446 li
cp
.603021 0 1 0 cmyk
ef
610.294 159.446 mo
610.394 120.246 li
610.894 120.246 li
610.894 159.446 li
cp
.61062 0 1 0 cmyk
ef
610.894 159.446 mo
610.894 120.246 li
611.494 120.246 li
611.394 159.446 li
cp
.615595 0 1 0 cmyk
ef
611.394 159.446 mo
611.494 120.246 li
612.094 120.246 li
611.994 159.446 li
cp
.620783 0 1 0 cmyk
ef
611.994 159.446 mo
612.094 120.246 li
612.594 120.246 li
612.594 159.446 li
cp
.625513 0 1 0 cmyk
ef
612.594 159.446 mo
612.594 120.246 li
613.194 120.246 li
613.094 159.446 li
cp
.630396 0 1 0 cmyk
ef
613.094 159.446 mo
613.194 120.246 li
613.794 120.246 li
613.694 159.446 li
cp
.636683 0 1 0 cmyk
ef
613.694 159.446 mo
613.794 120.246 li
614.294 120.246 li
614.294 159.446 li
cp
.643 .00332647 1 0 cmyk
ef
614.294 159.446 mo
614.294 120.246 li
614.894 120.246 li
614.794 159.446 li
cp
.649775 .00875868 1 0 cmyk
ef
614.794 159.446 mo
614.894 120.246 li
615.494 120.246 li
615.394 159.446 li
cp
.65478 .0238651 1 0 cmyk
ef
615.394 159.446 mo
615.494 120.246 li
615.994 120.246 li
615.994 159.446 li
cp
.661921 .0365301 1 0 cmyk
ef
615.994 159.446 mo
615.994 120.246 li
616.594 120.246 li
616.494 159.446 li
cp
.666804 .0517891 1 0 cmyk
ef
616.494 159.446 mo
616.594 120.246 li
617.194 120.246 li
617.094 159.446 li
cp
.6701 .0584115 1 0 cmyk
ef
grestore
1.132 lw
590.594 126.446 mo
590.594 123.346 597.194 120.246 603.794 120.246 cv
610.394 120.246 616.994 123.346 616.994 126.446 cv
616.994 153.246 li
616.994 156.346 610.394 159.446 603.794 159.446 cv
597.194 159.446 590.594 156.346 590.594 153.246 cv
590.594 126.446 li
cp
.92929 .879301 .889677 .799283 cmyk
@
gsave
590.494 126.446 mo
616.994 126.446 li
616.894 126.746 li
616.894 127.046 li
616.894 127.346 li
616.694 127.646 li
616.494 127.946 li
616.294 128.146 li
615.894 128.746 li
615.194 129.146 li
614.494 129.746 li
613.694 130.146 li
612.894 130.746 li
611.894 131.146 li
610.894 131.546 li
609.694 131.846 li
608.594 132.146 li
607.394 132.346 li
606.194 132.546 li
604.994 132.646 li
603.694 132.646 li
602.494 132.646 li
601.294 132.546 li
599.994 132.346 li
598.894 132.146 li
597.894 131.846 li
596.594 131.546 li
595.594 131.146 li
594.694 130.746 li
593.894 130.146 li
592.994 129.746 li
592.294 129.146 li
591.694 128.746 li
591.194 128.146 li
590.994 127.946 li
590.894 127.646 li
590.694 127.346 li
590.594 127.046 li
590.594 126.746 li
590.494 126.446 li
cp
eclp
590.494 132.646 mo
590.494 126.346 li
591.094 126.346 li
591.094 132.646 li
cp
.420386 0 .974212 0 cmyk
ef
591.094 132.646 mo
591.094 126.346 li
591.694 126.346 li
591.694 132.646 li
cp
.427161 0 .972259 0 cmyk
ef
591.694 132.646 mo
591.694 126.346 li
592.294 126.346 li
592.294 132.646 li
cp
.431708 0 .966522 0 cmyk
ef
592.294 132.646 mo
592.294 126.346 li
592.794 126.346 li
592.794 132.646 li
cp
.438331 0 .962524 0 cmyk
ef
592.794 132.646 mo
592.794 126.346 li
593.394 126.346 li
593.394 132.646 li
cp
.442512 0 .959045 0 cmyk
ef
593.394 132.646 mo
593.394 126.346 li
593.994 126.346 li
593.994 132.646 li
cp
.44947 0 .955261 0 cmyk
ef
593.994 132.646 mo
593.994 126.346 li
594.594 126.346 li
594.594 132.646 li
cp
.453529 0 .955047 0 cmyk
ef
594.594 132.646 mo
594.594 126.346 li
595.094 126.346 li
595.094 132.646 li
cp
.461952 0 .957458 0 cmyk
ef
595.094 132.646 mo
595.094 126.346 li
595.694 126.346 li
595.694 132.646 li
cp
.467658 0 .96054 0 cmyk
ef
595.694 132.646 mo
595.694 126.346 li
596.294 126.346 li
596.294 132.646 li
cp
.47364 0 .961242 0 cmyk
ef
596.294 132.646 mo
596.294 126.346 li
596.894 126.346 li
596.894 132.646 li
cp
.477729 0 .961028 0 cmyk
ef
596.894 132.646 mo
596.894 126.346 li
597.494 126.346 li
597.494 132.646 li
cp
.48423 0 .963928 0 cmyk
ef
597.494 132.646 mo
597.494 126.346 li
597.994 126.346 li
597.994 132.646 li
cp
.487709 0 .966461 0 cmyk
ef
597.994 132.646 mo
597.994 126.346 li
598.594 126.346 li
598.594 132.646 li
cp
.494026 0 .969268 0 cmyk
ef
598.594 132.646 mo
598.594 126.346 li
599.194 126.346 li
599.194 132.646 li
cp
.499153 0 .971344 0 cmyk
ef
599.194 132.646 mo
599.194 126.346 li
599.794 126.346 li
599.794 132.646 li
cp
.504112 0 .973205 0 cmyk
ef
599.794 132.646 mo
599.794 126.346 li
600.294 126.346 li
600.294 132.646 li
cp
.510582 0 .977234 0 cmyk
ef
600.294 132.646 mo
600.294 126.346 li
600.894 126.346 li
600.894 132.646 li
cp
.514092 0 .978363 0 cmyk
ef
600.894 132.646 mo
600.894 126.346 li
601.494 126.346 li
601.494 132.646 li
cp
.52108 0 .979828 0 cmyk
ef
601.494 132.646 mo
601.494 126.346 li
602.094 126.346 li
602.094 132.646 li
cp
.526055 0 .980102 0 cmyk
ef
602.094 132.646 mo
602.094 126.346 li
602.594 126.346 li
602.594 132.646 li
cp
.532616 0 .981231 0 cmyk
ef
602.594 132.646 mo
602.594 126.346 li
603.194 126.346 li
603.194 132.646 li
cp
.537926 0 .982452 0 cmyk
ef
603.194 132.646 mo
603.194 126.346 li
603.794 126.346 li
603.794 132.646 li
cp
.545892 0 .985962 0 cmyk
ef
603.794 132.646 mo
603.794 126.346 li
604.394 126.346 li
604.394 132.646 li
cp
.550042 0 .990234 0 cmyk
ef
604.394 132.646 mo
604.394 126.346 li
604.894 126.346 li
604.894 132.646 li
cp
.557031 0 .992706 0 cmyk
ef
604.894 132.646 mo
604.894 126.346 li
605.494 126.346 li
605.494 132.646 li
cp
.560845 0 .994202 0 cmyk
ef
605.494 132.646 mo
605.494 126.346 li
606.094 126.346 li
606.094 132.646 li
cp
.566949 0 .997497 0 cmyk
ef
606.094 132.646 mo
606.094 126.346 li
606.694 126.346 li
606.694 132.646 li
cp
.571344 0 1 0 cmyk
ef
606.694 132.646 mo
606.694 126.346 li
607.294 126.346 li
607.294 132.646 li
cp
.578058 0 1 0 cmyk
ef
607.294 132.646 mo
607.294 126.346 li
607.794 126.346 li
607.794 132.646 li
cp
.581109 0 1 0 cmyk
ef
607.794 132.646 mo
607.794 126.346 li
608.394 126.346 li
608.394 132.646 li
cp
.584802 0 1 0 cmyk
ef
608.394 132.646 mo
608.394 126.346 li
608.994 126.346 li
608.994 132.646 li
cp
.590967 0 1 0 cmyk
ef
608.994 132.646 mo
608.994 126.346 li
609.594 126.346 li
609.594 132.646 li
cp
.595605 0 1 0 cmyk
ef
609.594 132.646 mo
609.594 126.346 li
610.094 126.346 li
610.094 132.646 li
cp
.603021 0 1 0 cmyk
ef
610.094 132.646 mo
610.094 126.346 li
610.694 126.346 li
610.694 132.646 li
cp
.606806 0 1 0 cmyk
ef
610.694 132.646 mo
610.694 126.346 li
611.294 126.346 li
611.294 132.646 li
cp
.614252 0 1 0 cmyk
ef
611.294 132.646 mo
611.294 126.346 li
611.894 126.346 li
611.894 132.646 li
cp
.618799 0 1 0 cmyk
ef
611.894 132.646 mo
611.894 126.346 li
612.494 126.346 li
612.494 132.646 li
cp
.625513 0 1 0 cmyk
ef
612.494 132.646 mo
612.494 126.346 li
612.994 126.346 li
612.994 132.646 li
cp
.630396 0 1 0 cmyk
ef
612.994 132.646 mo
612.994 126.346 li
613.594 126.346 li
613.594 132.646 li
cp
.636683 0 1 0 cmyk
ef
613.594 132.646 mo
613.594 126.346 li
614.194 126.346 li
614.194 132.646 li
cp
.640772 0 1 0 cmyk
ef
614.194 132.646 mo
614.194 126.346 li
614.794 126.346 li
614.794 132.646 li
cp
.649775 .00875868 1 0 cmyk
ef
614.794 132.646 mo
614.794 126.346 li
615.294 126.346 li
615.294 132.646 li
cp
.65478 .0238651 1 0 cmyk
ef
615.294 132.646 mo
615.294 126.346 li
615.894 126.346 li
615.894 132.646 li
cp
.661921 .0365301 1 0 cmyk
ef
615.894 132.646 mo
615.894 126.346 li
616.494 126.346 li
616.494 132.646 li
cp
.666804 .0517891 1 0 cmyk
ef
616.494 132.646 mo
616.494 126.346 li
617.094 126.346 li
617.094 132.646 li
cp
.6701 .0584115 1 0 cmyk
ef
grestore
590.594 126.446 mo
590.594 129.546 597.194 132.546 603.794 132.546 cv
610.394 132.546 616.994 129.546 616.994 126.446 cv
@
603.794 120.246 mo
611.294 120.246 616.994 122.946 616.994 126.446 cv
616.994 129.946 611.294 132.646 603.794 132.646 cv
596.294 132.646 590.594 129.946 590.594 126.446 cv
590.594 122.946 596.294 120.246 603.794 120.246 cv
cp
.529656 0 1 0 cmyk
ef
603.794 120.246 mo
611.294 120.246 616.994 122.946 616.994 126.446 cv
616.994 129.946 611.294 132.646 603.794 132.646 cv
596.294 132.646 590.594 129.946 590.594 126.446 cv
590.594 122.946 596.294 120.246 603.794 120.246 cv
cp
.92929 .879301 .889677 .799283 cmyk
@
1.5 lw
520.194 139.646 mo
575.194 139.746 li
0 .728176 .911833 0 cmyk
@
590.594 139.846 mo
574.494 134.446 li
574.394 145.146 li
590.594 139.846 li
cp
ef
.92929 .879301 .889677 .799283 cmyk
%ADOBeginSubsetFont: RBAAAA+PalatinoLinotype-Roman Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /RBAAAA+PalatinoLinotype-Roman def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/OrigFontType /TrueType def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 2 /g2 put
dup 5 /g5 put
dup 6 /g6 put
dup 7 /g7 put
dup 9 /g9 put
dup 13 /g13 put
dup 14 /g14 put
dup 16 /g16 put
dup 18 /g18 put
dup 19 /g19 put
dup 22 /g22 put
dup 26 /g26 put
dup 28 /g28 put
dup 29 /g29 put
dup 30 /g30 put
dup 31 /g31 put
dup 32 /g32 put
dup 33 /g33 put
def
/FontBBox {-7 -281 982 726} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
19 dict dup begin
/.notdef <1C60D8A8C9B783249909E597AF5E360F470A291979D213023246D8
2BBA0579352BC45F2930551FE69BD2CF566D015D38EB818F43BE51C9A8B4F922
D68DA47C49DD02BEFCAEA6818E6DA462BCD63DAD1171CD9BB7EBA4FD08275BB7
AEECF115CAE1456210E5F3DF05D46FC60C1427F8BDE3A2C1A27D493E3A3DDD57
FFCA76B17D045C08BF009123949490AE0D0EA5475E11EBCDE0566766D90D16F9
83E997682C8D9C7722EFCD508508D74EA4E66CE6AEBC19BE2172E5503660F4E5
829E715EF493542F09A6414DC3FA0147F2B08A72ED11EBE56CC3454404532EF7
E35915C3D1A080445A622D5CAD35D760E17C627135B6B0C54E929DB549B9533D
A7078BBF983947284E9EF4EA25D8F2F54AB8FEFB99A17084ED24D9> |-
/g2 <1C60D8A8C9B7A73DB8A0B126C7861326BD8469A0C48D696754F3C3F04F6
88BF8C2468DC4F85F66A2017554ABF65D8B682461791409CECA13E621478F21C
22EF072F86865877DF8BC3EFE47A8861F9151E4017BDB55D5FE55EBAA7116033
56B66534C49CD57A82853E5982D407F7A402CE7E004F4533F06F2AA683154EE4
C00EEB536E4AEEF53FE2786835DF520D7255FFDA7EA6C448F0417C074D832B5D
D0378BD473AB299C3BA722FB099D7CE2DA3411E14437A00E27DB878B99B25060
7D24D973A0E24B479ABE7C19E5B42B5B46A6C2E1BCC3BEF33C5C8AE448D6F45> |-
/g5 <1C60D8A8C9B75CBB53217CDCC3E81AED32E48CA771618E6B9A2679566B4
389EF9FC1B26AC0194081830C68D430D497C4FE1AB940475FC89FBC4B53D8E06
FFF23BDE3CEAB7789252CABD911EA6110E72E3F46F089BCF80D192963546AE40
CF56C00EC48B21654E447C31F21319A02175982AB50579C273759017C93AA11D
8223890E794BF578D66CFCDDC5E57F530E8A21E78DB5F9EDCB553189D3503D0D
9A032EF6F901F39B901B9230313A65524218DE2FE815C01ECB3AA4418C3B94B5
499663A3B967C6EEC95E64082325DC62B9E736B632CF30837A4EE1E58FDC41AB
4E49233> |-
/g6 <1C60D8A8C9B7303173C77F175291A78E4C0AEEF6F932819015F4A24398C
37E99C29197872B1B006BCA7AEEC3FAF043C24C7B3B1CCBEF7B56765A02BCC67
5898C335F4FF572E11B39DB3C9DFBBE508EEB0A89018730D278E86F35B1FD778
31D041D9E5F75389307E77EAC09AAE62E94F086161184DA635DC4AA494C14B11
9911E025CD173237733FA5613DB4424A6ED409597B3F51CCC7EB5437DC83D088
B1631FC8911EB9388130FA373E0B1FEB61E0D155C04CA697ABEAC59D5785163B
EF19F2204300DC14799AD7597AD310D50BB27A4829E83569BB52B27D0C98E5F8
93FF17DFA7F357337649BBD1AA685F8032BF5A296273796> |-
/g7 <1C60D8A8C9B8707C25> |-
/g9 <1C60D8A8C9B7F51B7AAE9ED47003DFCA1D50EA5291BF4159109B5EB4C09
53BD102E168E64FD81EC3DCAAB6C12EE842ACBD52615EB7FAD4660D012065BC2
7CE704D6F99CF3031527461DC8092862B7736C64A05780D13AEEBCE66D208C59
AD652D83C9DCD717C3A0F25877AED688927C8FA0533BCDED91CFFED2F2E8A271
43167CC0EE22AC207219118DCC6757F33680A2F3D60F413C3C8F17619DC402B2
A469E0B9AC00C5B7D7E6E3AFDC3D7A0642BEE8372162F3697597E6D6A6CAA0DF
A9FD9809EF6F684249688EDE9BB7477FE09707588C778C0A67B844FBA15CF0BF
E25BFDD2ABFA8EBE211B162A2985B3D36F65AF390466E198903D752B12993BA0
2504D9BCD527AEB7B8A77C56758E15B57A63CADD58A48404E166075B1E2E4AA0
F2CFDDC4FC7011E3C9588304370857AE909D8808DC3874B79D263A8FD4383188
4D12221240F729C958990CA5E97B8D3C7F59DFAA4168D63E02365F36F27B2101
6> |-
/g13 <1C60D8A8C9B82424F8B5BEEADE4725F43C3EB707948DBFFC2BDCE8C3CA
D9AB119116A95FE026B89F2C007C915F73CA81AFBC47DE47A9A991E274C3DDAA
F32FB04E604A7A2C3D0DE8F39018A3D876F2A1B7AB8CE951EB1131900F56776B
E0F0D32177414E4ACAF3D6DE62CF0F1A13EE29481E6201E2596D4B685C026BDB
AD559FCE7157503B64D3E95B2811BD99751DEADE8C0206A87D671FF4ED0EF1D9
9FFD03F46037865DB4DF> |-
/g14 <1C60D8A8C9B78E05B8017872AE88C7AE04F218A809EB783FF9ECC317DC
6DE27B968643F7F2D0863F8C010C07C729679AF75EA9E425408F234FABCEA7D5
DBD8106A3AADA030D5E8F9A13205E66F688D85931FE1E50EFE8593376B415B6C
1E3D5C240F59DF9F6882D6ED213E1EB69E2D2E5833CF2E740C65DF88E3353140
BEE583E3F1ED6BEE1400ED540B3A1257C051DD9B9C423393C3A3A5A94296CE45
C8E79780885C6B6CAB38189C0CBB04DE386320F3FA2E296B9A92DC71EDEEA3A8
E951966ADEA25C68EF5F4B8FD6CE219A97BEBDCFF90242DE29495E0C8C94FC99
B1C3D9E470333B33A1F96814FE3CAC424276B51361FE51B3EDBE8AAC892C465E
2AAC820289A04975D43F2DD430DE79FE4A54B9816699DE557FE910A73AA5F92E
E55FA497C697D10587BEB7817FA127DD> |-
/g16 <1C60D8A8C9B77FE2C190ECCB8900406A732F4AED15215E66CEBE4FDAEE
1B0C5F30CC3105313F2942F96336FE3C0FC98E2A2EE2A757EAF791D1FF6091C6
6D60C59361D9CA1283071E636A317A465B7E291BD18C2345FBA33CF201A64656
858CA022A2AB8C4BFDF9466945CAE6C28946731A7DB1A1FD0A16E9052BC725F6
38F422A01373D279EADE9A140DA828D4217546D3CFCA587A29FA63F055217B0D
1B5110DD6EE185699B28FB54D46C693D9EB3C65762D29BD5E444EF2506> |-
/g18 <1C60D8A8C9B799EBEC10E37D3CBBF01D1681B560ABF8EA5303B965C96C
694F7DF0B9FA0322993E7C8D447CD6D9BE5695E4C3AFBD6D8A2103D9466938E4
CD8115A8E9062690FD69C2F3770BEAE4F1E0127D1153921AB2A5DBB1497DA446
B71FB68368C90181C45CE11D84A11ECB8133019CE3B1D70205035D63C087ABE3
B87459F5EE5AEDEAEFD7207E238E8699BE970A10935EE8167CAED0> |-
/g19 <1C60D8A8C9B6B770204298DC648EA4313CD8E0B07C9F6A7DD45B00C520
DBE4311B8C83576C726CB8A9CD06C36FD69D52FA2ACDCDBBD9E018D6C8D3D839
9A18CDFF02AAA61A832E1C5F4691BF4EB3DE4EBC47296E88C72250C72B9E9AEB
6AF07394EE3C234B91739DF1783AFBF5F94BB0E461EF17DF6BC8A88A92DD3C26
E64FF3CCCA22EF6B893A4F849EFE86797EE047E4562A4EE3A2779BBA0AA4A049
27F541A6855F957E7AA6A9B975AF901E93C19C86E18E6CCA57AD820FCAE47420
4862F9CFA00F4CE705147091D79FFC68A4794BB8234926A3C63A5774C0C1D886
77C7187E51076CCC9E014E363C395B78622989160C483DA7CB24250137159104
4E00401179AE4D4158CF33814FB5> |-
/g22 <1C60D8A8C9B7F51B7BDD1C91AB71D07207196084E143DE8012EE13C9B2
7BD31401936782D7472FC6DC7F0927F75C4A795C4C7E18788AD6CCAE78E45995
D5BB604030432041A3958C9EACA392550A4059C7545D0FB6F9123BB358A5F035
0B536945A2D93C1E40DFCEDBC4BD57783D5E1106A5504C276725EFB0DB713F09
988ECB06218BF6F9F1527056AFAC4C75F85CE6D7AE4A986DABDC459ED9F99AD7
3737B5495CEB5908128E39097A94AFCF697800E33236B7FE64D67C23BDF94EEF
DA6C0C0853E141AD9BE09B550E8B47888DB6E43776CDB80520D98F0EDADE3878
5AECB1C3393324796073B4F874E98B38F2BDD202198A1E27B0C3E62B0FF66D17
C08ED43020FBB57AC320DA77A36D7B88194F93162C67DBC03F630F4698D5C46C
CEC033C9DECE286274E5260D05109261399B91E5A7CBA05D0625B4CC5C945239
C4E0C1C89146E15BBE1F4EDC4F96E9F6BA42124358FF0914BF7A5481156408> |-
/g26 <1C60D8A8C9B65130160282909FDC14803C57EEDA892863A4F93E132714
5575F9316F4F816C4DD81D5E3AB273D43536AB1B18B9D3CCF2F4D5CC7037A231
11C3D7C06C01523D098F00406CBDEC635AED3D5638DDEAF5CD18D050559B6B71
437A55C36543DFFD7BE28341125FAC037357A6AAE0607571EA20A00E34186D3F
55CA4593773529F9DA6B1E1BB8CD235F649D3DAE73EA62682D28C151C42F7715
E3562AAA666CF110AD5A02224F03566A87D90F5593491F19728C3451CD2BC6C8
45C5D3D25DA5063843C0D55398904C2C634AEDD0C74587A78617291F8020144C
0322FEC389E8F927539F5344C22606BC00C03B94A892BE70C598DC68255D417F
1B8D64207A8CE88B361856472A676C63569593EAFF405F0CD8A22DABCE99D15B
F33E2FE58CA50685B2E47B7436DCEEB18EAF731C31B179A6BB31A43847B7FE56
F8D34E846F8D7A5652B1D1CDEFB72ECF164973F574> |-
/g28 <1C60D8A8C9B59575804B8B1F5961771174AD1D5D05F7CD025AA5A8ACD8
F4D52E77DF2458C126662086E075118E107D08CFCEE374694D14870065B355F0
BB2998FA4A0DA496637A9DE1645AAB3B6FE3D7DACC94F224625BD8C5AE0BD5A8
9245662444D0E5407B038C5FB23E56C929426E6A19ABD9AA094D9E346DFE7031
65C4592C9B317287C9CD213350DD366E337B071C9DCD74411219D607B87A1F53
4A96D3B56023AF90FFEC69C1C906040213B326E529A6E51304CDA9C44A14F70D
D4840D6FF2561E949202739AB30B40676E167AED2A9682A0D2FD3CB29B5384A4
623B5F7A8F409CEAF2FC38FC7E45AC6FC6949C9EB679F94D164BF016AC2B5327
A84868460F356E8EACFDFF0AFD685434C1BB7493D4A4B571327AA6F8D13E7EA9
1BA5F52BAC2751D15DC440F55DCC9E9B85F4B37A47C44A7A047A4FD4FA13D813
7781D347E7BAE18ECAB221927EBF4895C2ED3A2EEB7B36B8650303A47571D575
94A09803181A9A62905D756253337D6E1F9CB38B23D088FCBBC4F98C2BB4B8E9
1BC98EDB9F9CF75431AD1C46976D17CC5C202E4D07A30C8211378C3E6E16651B
75D403F80697B81ED83F75F1DD0E697C679E84F0D42034F095009A1D106C5A25
3B29E5E81E55770D7880EB1672AABFF62B934FFA26067D23F6EE5E87C0158925
D60D1679E38EAFA5670B930BD0CBFCC5309C15166FBD091C73C0774D1127ABC8
A927B0B3E14F15A5DA878D> |-
/g29 <1C60D8A8C9B6FB5FBC869535888379E5E7055E7998E872AF8D10DEECBD
44DC4CD8BC109801238C002D463B5BAC25C52F3D00F6482609F08A95B51BE43A
D0FC173DC794EC8782F0CAA8EF80AF6A7F4D77036BDBE4B245CA63A6CCC3502C
DBDC1E9E60AA432A80940F0710396832F1C67DFD7FC566C11B3238888CB6C356
742D39288A3F007966B3E9EF5C6E8515B5286756BD0AE80AC86A21F71C919309
C607B863ABB6AB61BBD4CBB9C74384C4F61A4360241B4BAC9B58C067F77150E9
377756D8353A681F4601446ED0438BDF93B0AF78F930E45CDD3DB40655FEBB92
499EE5895E9B8AE8BB0C73366497FA7459875B1EF85F0ED86D94713933BEEC77
6CBB61FCDE5D1F3F4A9F3FD6> |-
/g30 <1C60D8A8C9B7D8BE2366BDFF0A68A966241FAED677E7E785BE5EFADEEA
32853CCDAF79D932E82EDE8031433AEC8AAAD22813E889DFF305794204A8BD58
32E266AAD4036C2F9CBD7ABA80F979094E606E1ABE73DE50E1108A9D1B8E4611
792DF0EC9BC22653AD71B8A61BD8A745A95AADAC9A5E0F74B8CA6FF9A0962EC3
85DD357DC4E2A74E14DD729B37C93AACFD8F341BC1B4E05AF0332F626E98A59D
A84592EE9A5570560FB308D371AFD79E2D7B81A7296DA7910682A93E95058546
F2EE93DE5C84F669E598265543D13061E3D25A9F0C14536B10FF770282845C05
9D99DDAB472459F76D5898528EFBABB474D82ABC716AC73413F8478AF820B4C7
DA218C290F5F208F257C887B0CB56DA9A04D5048478C768FDD08D064CB6BEFAE
568CF22FC5CD64B637E1A06449BDB5570E22EF909667E8352ABEDBE2DAAA0D0F
9F2879FA9675D9CB300577C33E6DB3EDAF5085138BCFCDDEDCA52983DF31D6D5
2C97> |-
/g31 <1C60D8A8C9B7D61BCB8AA99D511832650861F31E6A98EECD0315EB1C24
0192E579BFAAF6CC4263F81FE6E9B4F6311D4AFBAE36CDF92887D4ED387C20E5
A4CF0742ADD5450F8F1405ABBEAC29F95757F4BF05207B98BE5FB66E0243EDDD
12BDDF946C28BF6FFE3E007121C4E2190AFD8B5BBAB59B2D21692FCF09D5295C
298A7EC931745E51B6EB97764E877EDC26571C98BC8EBA2D59E891A8ED972E31
F0BEE28D2C120FD8AE58F53F81B4B04A2C705E0ECA6E004398F6BEC301E7AB3D
F2A7A1F81835A8AADDE207F9BD2851EA22ADE2CEE8C434031348A2CE95B8079C
BE0D54A8514F74A90AB9A30D2FF01B2911> |-
/g32 <1C60D8A8C9B6B278B0A38095A2FB5AB1F6B58A626EC88EBC99316BB217
7D9C047FB44AC7E905C8F29C6808C2C2A70A24A46410AD925F0DF22C0AF4D2F2
EC1021342955BFAB1783216BFE7C2B3BC733E4794A9267122F285455E5045763
00BFAB81840ADADDD7B288AD299B6A10F48422B9C63543F2691AF2A40A17A495
B6239E427B10B6A727D40E8CAC4C6260FB3A00A394CC9695C7BDA902656FFBC0
001DCAF851A7EADF7B7D1CF32A1CFF923283D3762A883DC197B3E069F309B721
1DD0E269D5C88DFD68867A1C0101A3FE98015E7D050A5D1081E92F183EC22E8A
8E8521A3F34726A0B26A93A875D55F28424AEF2A478FAECBFFD0CF9C499297BC
7C8AC2DCFAFB570D9DBF59D3DBDFC342AC8DB963711B01CB3F8210E14FFD7A46
650AF161AA7C8893361ABDA109BECD081E29581231F9003C13DED2E9A2> |-
/g33 <1C60D8A8C9B6FF86F5F85FF29BDD6676F8C792F77CFD4A3DC4A761AE9D
0FC645C4716DD551BDB16D7911E543F159DB86DDE08D50B3B73DC4A0588E703B
F333821ECE3E817D3625A88DB42A5F367D8B6D0C2C27731B9F6DBA1B3A9435F3
9B0AF8517B15277926921602779489E4248A173C13C45C1F35811B62B8C55D8D
5F35079177D293C30EB085460D7B25884C87F33C9E28CB970CF15584771B04A9
748151977C1D47E66D1D4AA4887F9C9E239B7A3F60FCA018424EEEFDACCEA5DA
EEDE40162FB26A63F8BA7E3B30B8C663DB401FC160C215769EFF> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/VSHTKH+PalatinoLinotype-Roman /RBAAAA+PalatinoLinotype-Roman findfont ct_VMDictPut
/VSHTKH+PalatinoLinotype-Roman*1 
[2{/.notdef}rp /g2 2{/.notdef}rp /g5 /g6 /g7 /.notdef /g9 
3{/.notdef}rp /g13 /g14 /.notdef /g16 /.notdef /g18 /g19 
2{/.notdef}rp /g22 3{/.notdef}rp /g26 /.notdef /g28 /g29 /g30 
/g31 /g32 /g33 222{/.notdef}rp]
VSHTKH+PalatinoLinotype-Roman nf
VSHTKH+PalatinoLinotype-Roman*1 [18 0 0 -18 0 0 ]msf
130.394 107.846 mo
(\032\002\023\007\035\002\015\002)
[12.0061 9 14.9939 4.59 13.8959 9 5.88606 0 ]xsh
101.994 252.346 mo
(\036\005\002\015\037\022\011\005\007\035\002\015\002)
[11.088 8.60406 9 5.88608 9.702 9.88196 10.404 8.60406 4.59 13.8959 9 5.88606 
0 ]xsh
277.794 141.846 mo
( \005\015\007\036\006\002\011\020\026\007!)
[14.9759 8.60406 5.88608 4.59 10.98 7.09207 9 10.404 8.08188 10.404 3.996 0 
]xsh
277.794 288.146 mo
( \005\015\007\036\006\002\011\020\026\007\036)
[14.9759 8.60406 5.88608 4.59 10.98 7.09207 9 10.404 8.08188 10.404 4.59003 0 
]xsh
445.794 217.346 mo
( \005\015\007\016\015\005\034)
[14.9759 8.60406 5.88605 4.59003 9.39606 5.88605 8.67609 0 ]xsh
2.79407 184.346 mo
(\032\002\023\007\035\002\015\002)
[12.0061 9 14.9939 4.59 13.8959 9 5.88607 0 ]xsh
%ADOBeginSubsetFont: FDAAAA+Cmmi10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /FDAAAA+Cmmi10 def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/OrigFontType /TrueType def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /g1 put
dup 2 /g2 put
def
/FontBBox {0 -194 756 683} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A8415741C8C01
03E4FA257B8A4C6C> |-
/g1 <1C60D8A8C9B6761E730A5B6449B6E851E2ED65102C9232B6FCC2278EC3A
404AD7A785E36B066D96B585BB50ADD97600DFE3FDE7C4796E7C7638C017396B
4BC1C3C2A26042694CB6082B5A55C537A2B222E4FD13F40366A566C57C00C951
EE8B8F29D7AA8ABFAEF3F299089F0ADCD04B816F05646C3A465BD602384BF08A
8490AF81BC34C77A8A82E082D26C5E0975D9DD9D4F443A04B965AA6A6BE7C673
D751B39A5D0208301D807EF675CDD6CEDC987524901E1DEA9D75866D246241AC
1623DB6BF69181C59DC93FBA7B300589A8F965461FC0D85BE5A6BF4889B21A73
3B379F4F02B80CE04A1FFAE12FDA282CFE7B93244EB1343B3F90C034C2CE1FE5
188316E8E89A95CF55ED6E6E5E855E0CB08F7CB5F7B01203A03A534419F4EF8D
295CD030F331F63430CB95A843B2A22D0ECC567C65A5886F227D597688AE16BE
925BC4E26605837> |-
/g2 <1C60D8A8C9B74A3ECC84F6FF99312368985D0292E72DCBFF8BF635F1185
D8B11CD145BA00584731DBB19090D71B2BA339444E22086A7DEF29692EC514B9
15F2A91A354592EEAEFBF5637A66706602FE08252E65ECB6F672B04D19A08145
83B59F2CB8A7ABB9AE81E92A662B2D259B1AB0CB9679184510AE00D101792DD4
8662740E55BC9D2B4C8BBE54D7699E5223A30E4B071C5392AD1F0BED95AE961A
3E85852B983A93E815AC37DEF2E79662512D7269992EDA5EBCCDA8EFAABC6128
DA9C5219CB29D4E229005F6703CE03C80100554F0D7BBC874D45C7022DDB28BE
B558FAE4F744A5DCF080896EE0FD99A66E3F97F636EA38996CDEB96848BCC781
54AF8DF9434C2EEB1C457E1B5C4CCBF521831A5D1B4F9AC1614CE9DDE4C2824F
3BBB9F3733338673412E4A83B46E0B8519178090A714AD8BAC84C36AC5152CF4
E914EA212E465B98626D44B8E0B46BC0C7E972D3B8BC050055802528CAFDAB9D
0EC59BDE23D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/VSHTKI+Cmmi10 /FDAAAA+Cmmi10 findfont ct_VMDictPut
/VSHTKI+Cmmi10*1 
[/.notdef /g1 /g2 253{/.notdef}rp]
VSHTKI+Cmmi10 nf
VSHTKI+Cmmi10*1 [18.2699 0 0 -17.7 0 0 ]msf
101.894 365.246 mo
(\001)sh
%ADOBeginSubsetFont: LCAAAA+Cmr10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /LCAAAA+Cmr10 def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/OrigFontType /TrueType def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /g1 put
dup 2 /g2 put
dup 3 /g3 put
def
/FontBBox {0 -250 721 750} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A8415741C8C01
03E4FA257B8A4C6C> |-
/g1 <1C60D8A8C9B737EC2B6B8870301DB27BE724BA2349B139F81DF22F6173A
6526B9C2303A7BF817C5B5479CE48435A29FA9059BC66699C7D036EC53D6DE35
BEA7828DD82DBF57BEA43C38320B538411E2019780D3DE1E767A38F38714F01F
7E9254D03E3F47EA53F85627EA8FA04EB7618C9B9ADF37981DF88CDA8C6F615A
02139A29355E61903F4320964E4AC8E6321F0B6E7C4B59D5B0BD014D97B85547
B48A7600ADF0A5CD7> |-
/g2 <1C60D8A8C9B737EC09C296A73CC031B56B2CD882B3E53BBDCFF98DA013E
B6E416AA257182216B18FDEC986A682A40FF14A39C1511CE45222EE17A1BFFD5
AFE38F609715A055A2E452926BAB753C56707DE5EAA958B45F70862E82661E1D
B67AC7CB217565D88AD0657106C6A8C757C272E03E7A2A84C53ABB73A13B8120
0884EEB9E0E7A4382> |-
/g3 <1C60D8A8C9B6FC2D96BCF516080F6A5A5E485D47EC173C6672B0FB024C9
1B855CA195DE332DE6878816E188EFCB3C51CA4DCDD17BD2871C464E0963F043
A0A44BC4BD5FDFA4D0485266067C31C1DE3F40616903B39B61AA5771E65550AF
A6C6AFA996611CEE70A02CAC57A5C0E81D6661C85CBA704C0B39BB06EAC0C0E2
874B97F6D1FF318AF818B6B0F99> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/VSHTKJ+Cmr10 /LCAAAA+Cmr10 findfont ct_VMDictPut
/VSHTKJ+Cmr10*1 
[/.notdef /g1 /g2 /g3 252{/.notdef}rp]
VSHTKJ+Cmr10 nf
VSHTKJ+Cmr10*1 [18.2841 0 0 -17.7 0 0 ]msf
116.094 365.246 mo
(\001)sh
VSHTKI+Cmmi10*1 [18.2699 0 0 -17.7 0 0 ]msf
122.994 365.246 mo
(\002)sh
VSHTKJ+Cmr10*1 [18.2841 0 0 -17.7 0 0 ]msf
132.494 365.246 mo
(\002)sh
144.494 365.246 mo
(\003)sh
VSHTKI+Cmmi10*1 [18.2699 0 0 -17.7 0 0 ]msf
170.794 353.446 mo
(\002)sh
165.694 360.046 mo
185.094 360.046 li
185.094 361.146 li
165.694 361.146 li
165.694 360.046 li
cp
ef
%ADOBeginSubsetFont: QCAAAA+Cmsy10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /QCAAAA+Cmsy10 def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/OrigFontType /TrueType def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 2 /g2 put
def
/FontBBox {0 -250 722 750} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A8415741C8C01
03E4FA257B8A4C6C> |-
/g2 <1C60D8A8C9B8574418030ED7FA29A60496A1C312A8C90E1127AF5CB942B
4FDB2F13F9ED8E16A7FC65F0CADABAC6FE66EBCB619A822FEB4A9AE8942C9B70
24ABADB9D1CFA86530217EC0A9633A6> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/VSHTKK+Cmsy10 /QCAAAA+Cmsy10 findfont ct_VMDictPut
/VSHTKK+Cmsy10*1 
[2{/.notdef}rp /g2 253{/.notdef}rp]
VSHTKK+Cmsy10 nf
VSHTKK+Cmsy10*1 [17.9106 0 0 -17.7 0 0 ]msf
165.694 377.346 mo
(\002)sh
VSHTKI+Cmmi10*1 [18.2699 0 0 -17.7 0 0 ]msf
170.794 377.346 mo
(\002)sh
VSHTKK+Cmsy10*1 [17.9106 0 0 -17.7 0 0 ]msf
180.294 377.346 mo
(\002)sh
2.292 lw
301.394 2.146 mo
290.194 2.146 li
285.494 2.146 280.794 3.54602 276.394 5.74597 cv
.57174 .481575 .451972 0 cmyk
@
265.194 14.746 mo
261.994 18.3459 259.494 22.646 257.994 27.046 cv
@
256.494 41.3459 mo
256.494 55.746 li
@
256.494 70.146 mo
256.494 84.546 li
@
256.494 98.946 mo
256.494 113.346 li
@
256.494 127.746 mo
256.494 142.146 li
@
256.494 156.546 mo
256.494 170.946 li
@
256.494 185.346 mo
256.494 199.746 li
@
256.494 214.146 mo
256.494 228.546 li
@
256.494 242.946 mo
256.494 257.346 li
@
256.494 271.746 mo
256.494 286.146 li
@
256.494 300.546 mo
256.594 305.246 257.994 309.946 260.294 314.246 cv
@
269.394 325.446 mo
273.094 328.646 277.294 331.046 281.794 332.446 cv
@
296.094 333.846 mo
310.494 333.846 li
@
324.894 333.846 mo
339.294 333.846 li
@
353.694 333.846 mo
368.094 333.846 li
@
382.494 333.846 mo
396.894 333.846 li
@
411.294 333.846 mo
425.694 333.846 li
@
440.094 333.846 mo
454.494 333.846 li
@
468.894 333.846 mo
483.294 333.846 li
@
497.694 333.846 mo
512.094 333.846 li
@
526.294 332.446 mo
530.794 330.946 534.994 328.446 538.694 325.246 cv
@
547.694 314.046 mo
549.994 309.746 551.294 304.946 551.394 300.246 cv
@
551.394 285.846 mo
551.394 271.446 li
@
551.394 257.046 mo
551.394 242.646 li
@
551.394 228.246 mo
551.394 213.846 li
@
551.394 199.446 mo
551.394 185.046 li
@
551.394 170.646 mo
551.394 156.246 li
@
551.394 141.846 mo
551.394 127.446 li
@
551.394 113.046 mo
551.394 98.646 li
@
551.394 84.246 mo
551.394 69.8459 li
@
551.394 55.446 mo
551.394 41.046 li
@
549.794 26.8459 mo
548.294 22.3459 545.794 18.146 542.494 14.5459 cv
@
531.194 5.646 mo
526.994 3.44604 522.294 2.146 517.594 2.146 cv
517.394 2.146 li
@
502.994 2.146 mo
488.594 2.146 li
@
474.194 2.146 mo
459.794 2.146 li
@
445.394 2.146 mo
430.994 2.146 li
@
416.594 2.146 mo
402.194 2.146 li
@
387.794 2.146 mo
373.394 2.146 li
@
358.994 2.146 mo
344.594 2.146 li
@
330.194 2.146 mo
315.794 2.146 li
@
.790311 .735592 .715999 .454047 cmyk
%ADOBeginSubsetFont: WBAAAA+PalatinoLinotype-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /WBAAAA+PalatinoLinotype-Bold def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/OrigFontType /TrueType def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /g1 put
dup 2 /g2 put
dup 3 /g3 put
dup 4 /g4 put
dup 5 /g5 put
dup 6 /g6 put
dup 7 /g7 put
dup 8 /g8 put
dup 9 /g9 put
dup 10 /g10 put
dup 11 /g11 put
def
/FontBBox {0 -268 785 728} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
12 dict dup begin
/.notdef <1C60D8A8C9B6E5995F15A66854A9351613821AD638183CCEAF2A3C
396BF57681D14C0458E09B33A305E1C6A73FAB7A6E653AB6AA67AAFAE784172B
8F8CEE9BC6F76E286B5CEE5C6CECBFFF132679F865460BB79C78EBA62DFA7710
22A3D8F836AE92FD04C88AF3C88B2E69791F103DC4DD711C10B06EB47038F4DC
D529FB2E51FE8D696BDFE2D93E0BB67F03044CB2AB147855C1EFDD6196246E03
BFA45182D430D2B7AAAB24E08AA62ACB85296B0AFDB563703467C769DAA63D1C
9E9370CBFA46F125A9B3EAD7FA099B04BD6D538175D36C9D537A844024BC7F15
709C6ED137F0540786DF41C0CCD34B0AB6312933A1A62B2D9F53D29DC86B1205
380A5335B144784C1B45399D6BAA5B6C05E29F4658DB7DCD9185F6B92BDCF968
BBB2B040B4817EF9D256B6738EB85213E2CB699D29FE37186B7FC3D6F8FDBB71
9476067CFBB1115EA97AD47F7469AA429462976184EFF7F3F80C811F97F36E16
6A80B07830815CC25666F8> |-
/g1 <1C60D8A8C9B6B278BE9B6D94E7B11D43AC0D15457865B087397505BDB16
9A09CEFBDF54E1493A3D8CADC843D481D8A65FAFBA37B57C0EE89C5B31D6692B
09CCAD9AA03525A0120E0EF05BAF5CBBD50F867E969C29E409D09ED6EE635C9E
FF245327F430A2669DA8D4A523F8FBC27DF396B1827D17C865D9EC0F540D2DB4
60B14FE2602D05A524850EAC8AC09D7D1DCE67496AF3A284FA39C8338CF85E0B
E767FA548D4730408872062858FEA2192C83F636A51BE2699F8B380BD5704B2F
615161923C0C45D59215484EB168D8615C205554D5986080CEAE69BEB63F3579
09C9BEF8844CBDE> |-
/g2 <1C60D8A8C9B7A73DB6CB62E3D43ED814C8191231C722A2FEE684CC87690
C4B27E8776CD3F897894CC91AAD04B17F405F1788F2909E816245713A0EF5E23
2D7D63396A0E1FDBF0FF3EAA91EB0D9FFAC8586F761AA8195D11E61A2C7D64DF
A1DBCC8DBD1C608270D7565D0D1B3C607959BAE3BF97D997D2B203492C5BDBE7
A6CF3AE41C048957003D9A23C0C015A4A68E73463042E86CFD5C114B6B8C489F
B44CBFDED786945B401319FEFA20719DF16AB6D2C3CBEF8E2FD9CF6CA001FFFC
60A05B38689625453E41C25499524F34C4AC4609DEA2D5A4C459F3B12> |-
/g3 <1C60D8A8C9B81F2C3A753BD15BC17EF22FA7F2212C7CEC8B5B3911FCC6E
231D6A0A79FFE77E06EF7FC5AC0E96967ECB25FB0F5706C2CA0F1E6ADD769012
72ECAF54900935D4A159DC7CA90100E04F8136E4C69BEDAE098864DF14016A7A
DBC3D51715178297635A2E9E6EB16E2727ADE2BDE5344F81B8CEC101FA202B2F
721F088CA498EB935687D805614CB13EC4142C5E723FF2C7AAA6F0ED490DA09E
713FC7CF0AAE20F28963A9CEEA2E3BF993A00A97D60> |-
/g4 <1C60D8A8C9B8707C25> |-
/g5 <1C60D8A8C9B7D98F6DE6320BBAB1AA6F182B55D3532463ABC8166FF6AC0
4FC22C580D72C37CE2066CA178B589E93912EA84FD967993D315319E79EC2C4B
CD61C1B5966D3599A7141C9B532E4863A333B2B35B54A17B21E81301E836C5A9
7F7B0464463D02739B1FBA2DC3F6DD017FA018D1A63777AC68C383F4617D1653
778599278E3484C15478D6F0E7E27A71991B834542B746D409FC69CCEC24516C
7A619216141A120BB67A243894E117BA76AF2B235E9C122A5C956F32888C4E1B
7DEB0C11C36A999A320AF9A29F768197C858765ED0D23B2A7CE3C3A81790D516
1913F9BCC25AD> |-
/g6 <1C60D8A8C9B7361F02476D325C721FACAC29D2A79208BCFB5C243000345
3A38E9B3C9811CD741205C852C293E52AACEECBB9A71DA6EA94349890D5A62D5
3A23AA8493F8D7A8B27ED9EFC784AD5E4F21EBBAEB004138F0A88337EC368061
2872F6AD203F6FEFAE0DE24127B6DCBAEB21822878FAB94AD2E9BA02B87D803F
70DCAF7BEA260229E8A299095BB7569B211AB46AC3F4C8C973347A7250A56DC1
A1DBE41B3B141E54F3095517A7F2D8F6677F2092E96E098FEC9EDF50FB14EF5> |-
/g7 <1C60D8A8C9B77FE2C1A75B5D5DCF1FFA0D2A993D0090B9A721C4389041D
296D27204D9AF05C8E636564C01FE7F8E4204460100FFB0CE42BF0A42F68B81B
3D92FAB4C986CF656A39D9732A623A83E01A6C9D13CACC21469E3D631CBF308F
19703B01D60A2E7BACCEADB61DED35DC41429ED9B4C34353E7C818E14A7BF79B
25778D2FF3989C42F6765ACB9187F3427C2EB792BD2804441F2417B4E53F59F3
088DB5B807D40DE2E36A928BA7EBB7043758C5FB151FD5A17FF8B79BBADD481D
CB3DD31FED89448A6B1F3A8273B639504CB18> |-
/g8 <1C60D8A8C9B7A73DB68E63C2CC21319A603A01DE4EE1CF5BFEC8A941FEE
72EDC8FED25A6A800CE2BE57160FE5B7C344359961A153FC5C8204162E8A4FA9
8BB3A8A2794D1E5D470A2B6048C522204E5D3BCBF1850227B59ABA89C3CA2406
6010019A42A1E2772658429BC6919FC221DC91FACE43DCB7F03AE59ED5D43F92
56E6124E292337A5F9171984A9F45E43C5A061BFFA4DCD52C0651E45A528F376
6665F> |-
/g9 <1C60D8A8C9B63FB74F4A818347BB4943C0BE49A510A4831763BF2BD2A89
A26BC6817F7BDA2DF5C9A543D89F74741A8E80EBDE5B64472CAED65E0303D17B
F0002350A36315AD2BFB5E0D470250D284E249A391AD6FDDF7F2183E56CA5372
23FCD3C261680090396A0FE9552A999BCC782FA52D1FB40C4213798BB5BEF240
BAEEF659E437F0379F80F22E7559790643DC9290B63C0F3C8A8787465E32C968
CA873775CE0651168FDEF01CF228161B66F7DDCFB2958FC7EAA853F797CF3D62
F18BDFA7EBB50E0FD2ECED615E23A9618BE2815934436BF1F31B288E276B4756
10B19682331A2B4A670F8FB3F86FE6C353B3126665DA9FA9995C032F3E36BA28
1955C8B73350EDA6BBB239D0EBB66C22DA633721521CDB55B3CCC1EA16E66A6E
D873B4BA98981D108ACC05BA8538F4FD932> |-
/g10 <1C60D8A8C9B7EF3224D727C930B2B2B210E891CC7025F1E08F9A6B9F71
E64F4A5E214E4F65014C22EC327E28552BCE079AC98EF840AA6BF2966C9B834B
8F2E5414713B799A5F10F1B6BD2662018F165CE063157E520FBF75501FB93E33
EBF914573AFA27E49A359BB047D310DB70542BAD199FA8567AC2739F29CE19B9
9D1A46FACBE057CD0A9CBBDF7A19F9D8A189A2606C19236F321832947FB2E169
04335E57AB4B5E7947D7FDFEADB9614573C17FDDB2652B09433C04F150278777
A9BD85EE44AFA62F9D7997F6225F80ABF6A66EA1E1D1765C4E83AC4274954DC4
3F88B20D03FFBD008FE9FCF2F865388EB8B03BDD881062100018B4B823831E87
A26497A92B13DF8B04A1E17C4BCDBF741A2B3A785A011DC59C36E93CD84E1881
604B57B4891089261002A4033BBA0BCD31B753CA808DEF39BFE009> |-
/g11 <1C60D8A8C9B7EF3224F04952D1F4AA90752A36795C81CC37A64927C91D
E4AA82F54C2EC6CF2585F5A01A682A1A2F84C40F30BDA24BD8CD8FC1768404C8
7BBE67BC6646FDD136AA305B71E8CDA3C0D546C30AC09F1B717D9B6D2FFA664A
33BCD54A1709E65C45C97FAE47B102E8A1E5B804CC4E0DDB1749> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/VSHTKL+PalatinoLinotype-Bold /WBAAAA+PalatinoLinotype-Bold findfont ct_VMDictPut
/VSHTKL+PalatinoLinotype-Bold*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 244{/.notdef}rp]
VSHTKL+PalatinoLinotype-Bold nf
VSHTKL+PalatinoLinotype-Bold*1 [18 0 0 -18 0 0 ]msf
113.394 322.346 mo
(\001\002\003\002\004\005\002\006\007\010\006)
[14.9759 9 5.99387 9 4.59 10.98 9 7.00214 7.97388 9 0 ]xsh
368.994 322.346 mo
(\011\010\012\006\010\007\007\013\006)
[12.7979 9 9.98987 6.89417 9 8.08185 7.97388 10.008 0 ]xsh
.92929 .879301 .889677 .799283 cmyk
%ADOBeginSubsetFont: RBAAAA+PalatinoLinotype-Roman AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
VSHTKH+PalatinoLinotype-Roman dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g3 <1C60D8A8C9B849F23AE78F7642E08C359726F7CF4F80F1216C08CD888DA
C31F08420DE1D00BD4E7B04335C6B7DEA9D03A0068EF1AB859ADD45220835B6A
0CC3709FC50DBEA8AD396C0A5CF6F6721982ECAF3D4F9333351AC9AD750F68BE
68561835205E10EE1E394A9B5AB08A029DC31448CBD6DA81E54ECBCDC5E2A8CC
2F7B522E5806C57348EA8D94BBD629ED6B76CB89BBB8A0310834DA9448BE0E24
0C3CB26A838C3CED1A9644EEA7A74A5FA3FDA241847BD181673B60D7CB05078C
5C260DB13F10BB5FF99B08A8EBEC3ABE4726B42E7E52E3E66853A03668C1340E
F03CA5046F48324A6AD7EFE188960> |-
/g17 <1C60D8A8C9B7D8BE16C5A5EE95AEE30796D760A5A314D6C8961D48852B
61FE1C6EC37D89A91C2FF67CCE68D0640E6505D904CF5A086BF5B2AECE4F7444
6644892B3DF007EDC4C3C3C52A6E50B3DDDF43162CCB816387C2B83D950F0537
8699FD013AB9D96B6BD7022E0739D969B2EBE61F8EAAF0243AF78EE6890C5705
E53EDFACDFD0C206E0F9DCD27679E4BA9D3B4EA11CEA9718BA2D53D114C51A59
55B2A56A4D6983337258D3A69DB77AF103BFDEB215E55D6C985FB08C3E2B94FF
F7A600ACED634233806EAD7516116856C7526795D94D97F81691C4A33913E2B0
6F938A3D68538B1C1AA2EC088D198A33F3BF90537A7C1AD22F3AE21CB3E37B3C
691C3B247962410732CB9848E266398218E55A4773460702CCEDCE2DCAC00B61
9CBFBFD7CE46B3E41A75E304EA7D> |-
/g21 <1C60D8A8C9B7DF55CB92BF51EE281D392FDF27CC9C24FFDBB56A04D031
F6AC360629433419BDF053FF76EE5955160F374FDDB55F49B1AF3A1EA5997B77
4A31A9E00775C7EECD0C634A41476DAE8556257E5741125AF6C91C3835EED2B7
C0F1413A499AFC3B85F7A0F9D341188BC8D63DE0B4219131C05B96F2ABA74283
902D1F081D08C418AD214CE473D46F27A86F14737A8A826CDFDE4FF52734EF4F
FE21AE4A87D1C7F759133E571626A360CD117B6F59158B7E7159FACC61499BC4
F2DA8212F0CA48B6D87922944EBAAD1F0DCEDDCABA911A168EF961D87E09ABF2
ABB50EA3AB2F9CEF3E402AB2B273B4669F3A710B50F70CE3ABB43FB975E25AB7
50DEF6AF7EC78B93486618B5FF40B59999DCC312B83086BAA165> |-
systemdict /gcheck known {setglobal} if end {end} if
end
VSHTKH+PalatinoLinotype-Roman /Encoding get
dup 3 /g3 put
dup 17 /g17 put
dup 21 /g21 put
pop
%ADOEndSubsetFont
/VSHTKH+PalatinoLinotype-Roman*1 
[2{/.notdef}rp /g2 /g3 /.notdef /g5 /g6 /g7 /.notdef 
/g9 3{/.notdef}rp /g13 /g14 /.notdef /g16 /g17 /g18 
/g19 /.notdef /g21 /g22 3{/.notdef}rp /g26 /.notdef /g28 
/g29 /g30 /g31 /g32 /g33 222{/.notdef}rp]
VSHTKH+PalatinoLinotype-Roman nf
VSHTKH+PalatinoLinotype-Roman*1 [18 0 0 -18 0 0 ]msf
566.394 186.146 mo
(\025\006\005\021\003\020\015\003\022\011)
[10.98 7.00214 8.67603 10.98 5.27399 7.97388 5.88611 5.27399 9.79193 0 ]xsh
%ADOBeginSubsetFont: FDAAAA+Cmmi10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
VSHTKI+Cmmi10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g3 <1C60D8A8C9B6EB66DCF8A741FFE23626978F49C6D24614199C2E9958C19
9733DDA6CCDC87E52420E1F2C93E80036E6E57BACB8182EC7F0F48EEB31B1F02
C7EEB0E33DC3F01243B643936D90230E72871C438D7781DA7DE9C929B9269D8C
F1E8EA5B9B2FC97D179B7E30C4E48F2E03FBD4AFA69F045816200359EEB25538
2D3430E05C151F339146AA1FB2EA18E0A0D199C2A590FC4EBD7CBE56D77AE7E8
045B02422816744E178268F6A57FBED606827C022A623B42887056979FD800C7
A486BC2C953E6A99F9649529EB52FA4BEE19F3CB2472D6FCD2E0D03FE8B64547
D6EB8E10D61E949B7650BE12B9E306BA4BE58F182C7B196E248BD6E82DC39FF2
F2347EA67A36E5AEBE55E05ECE8B7A7A31F1E33B82B172BEDF2AAE15B057674C
DB7DE814DEBCE65F29D8E0D4BAD0ECA17322016F5CE3A5A069A5FF7EA9F99D35
3B06B5C2A86D9EC17A6D2A2941EE1032F7F007176E8DEDBC381CB6573F5DA1BF
B> |-
/g4 <1C60D8A8C9B857441CB7D1351645492FDBFEFE2CA05C8A1CF37A15A0EAB
85AA12590BD9C282AEE60E310003DFAE15635B7EACA181BE10EE761E84171E11
46F8242F13A58BBE1644244D5F7003F49615A20A2BD490F26C032FC045E9D1A4
C82E8A569BDB34815D4AD8C133E24E57A3CA836266965E1D249BB8C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
VSHTKI+Cmmi10 /Encoding get
dup 3 /g3 put
dup 4 /g4 put
pop
%ADOEndSubsetFont
/VSHTKI+Cmmi10*1 
[/.notdef /g1 /g2 /g3 /g4 251{/.notdef}rp]
VSHTKI+Cmmi10 nf
VSHTKI+Cmmi10*1 [18.2699 0 0 -17.7 0 0 ]msf
87.694 82.646 mo
(\001)sh
VSHTKJ+Cmr10*1 [18.2841 0 0 -17.7 0 0 ]msf
101.894 82.646 mo
(\001)sh
VSHTKI+Cmmi10*1 [18.2699 0 0 -17.7 0 0 ]msf
108.794 82.646 mo
(\002)sh
VSHTKJ+Cmr10*1 [18.2841 0 0 -17.7 0 0 ]msf
118.294 82.646 mo
(\002)sh
VSHTKI+Cmmi10*1 [18.2699 0 0 -17.7 0 0 ]msf
252.094 365.146 mo
(\003)sh
VSHTKJ+Cmr10*1 [18.2841 0 0 -17.7 0 0 ]msf
266.694 365.146 mo
(\001)sh
VSHTKI+Cmmi10*1 [18.2699 0 0 -17.7 0 0 ]msf
273.794 365.146 mo
(\002)sh
%ADOBeginSubsetFont: HBAAAA+Cmr7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /HBAAAA+Cmr7 def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/OrigFontType /TrueType def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /g1 put
dup 2 /g2 put
def
/FontBBox {0 0 625 664} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A8415741C8C01
03E4FA257B8A4C6C> |-
/g1 <1C60D8A8C9B7E2CE28C29836704051034ACB012D3A7E696A5FEF42EBFCE
2B70DCF207FC035D297174515A4227CCE5460BA94F7C6C3F58B5F0D3240FA3FD
8870555> |-
/g2 <1C60D8A8C9B7E2CE28C2982C907ABAB8E8288B7CC017BD7A93414BF919A
B3C8B38A6B81FB2125D2DB2B9C43E130146431631D6948BD27A626A3E4192151
802F1C014BE6AD762A1468A12D6DAE0C522B7C1990AD9366926436323D48882B
6E5006142CB886C868911BEDD63640DE501D11D1690E848EBC5C8902B8C3D79C
BE541D17252FD80A60D67C2970B6F8620A844589438C0A2F71DC71958B19EB10
EAA1B285288050E0728AD218A8C78EBBAB391F3129FB5A172C7CF28ACCD6174A
D5D4A77ACB26A8F3934EA78F5E0AEE07D02BE663237DBA78974345A7BED10F17
F227BCBF91B32ABDFBB4A7263D3F81454340A86636EB5BFAD8242425B9DDAB54
4FF5E2986> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/VSHTKM+Cmr7 /HBAAAA+Cmr7 findfont ct_VMDictPut
/VSHTKM+Cmr7*1 
[/.notdef /g1 /g2 253{/.notdef}rp]
VSHTKM+Cmr7 nf
VSHTKM+Cmr7*1 [12.7571 0 0 -12.4 0 0 ]msf
282.194 367.646 mo
(\001)sh
VSHTKI+Cmmi10*1 [18.2699 0 0 -17.7 0 0 ]msf
290.494 365.146 mo
(\004)sh
304.494 365.146 mo
(\002)sh
VSHTKM+Cmr7*1 [12.7571 0 0 -12.4 0 0 ]msf
313.094 367.646 mo
(\002)sh
VSHTKJ+Cmr10*1 [18.2841 0 0 -17.7 0 0 ]msf
321.094 365.146 mo
(\002)sh
333.094 365.146 mo
(\003)sh
VSHTKI+Cmmi10*1 [18.2699 0 0 -17.7 0 0 ]msf
354.494 353.246 mo
(\002)sh
VSHTKM+Cmr7*1 [12.7571 0 0 -12.4 0 0 ]msf
362.894 355.746 mo
(\002)sh
354.394 359.946 mo
371.094 359.946 li
371.094 361.046 li
354.394 361.046 li
354.394 359.946 li
cp
ef
%ADOBeginSubsetFont: FDAAAA+Cmmi10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
systemdict begin
VSHTKI+Cmmi10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g5 <1C60D8A8C9B74A3EF3A9A16CD30E11D61592EE7E3E2A328A9620042985C
A5EF5A24F48AF9480BD34C8436C83A44B9D3B2D2FC116ADFDCEA81238C6329CE
8C3AB6E454F7DAE876C0AAB7A2EAE2E11DEC3EBC03633292378CC6325F01A1D7
62CCC94B3FE261FE7C4E7F0B1CE3561AC916E7307B8DB8137E2B2458807474DF
E822533037AA32C36B4F943D532960CE3799688C6BA12B90B99362D6EC8A03D3
D4F70668CD087CE52E5D876EF739FF8E7BC650CB07F596C12A4F65DF6E3A59AA
49A8E1EFB9649D750BC7938DB4B5DF20511B32392054627EBAF525C9D4629D0C
2E16004DF362789B6D59FF7ABFC2066060A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
VSHTKI+Cmmi10 /Encoding get
dup 5 /g5 put
pop
%ADOEndSubsetFont
/VSHTKI+Cmmi10*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 250{/.notdef}rp]
VSHTKI+Cmmi10 nf
VSHTKI+Cmmi10*1 [18.2699 0 0 -17.7 0 0 ]msf
354.494 377.246 mo
(\002)sh
VSHTKM+Cmr7*1 [12.7571 0 0 -12.4 0 0 ]msf
362.894 379.846 mo
(\001)sh
VSHTKI+Cmmi10*1 [18.2699 0 0 -17.7 0 0 ]msf
373.294 365.146 mo
(\005)sh
%ADOBeginSubsetFont: BCAAAA+Cmmi7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /BCAAAA+Cmmi7 def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/OrigFontType /TrueType def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /g1 put
dup 2 /g2 put
def
/FontBBox {0 -204 625 704} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A8415741C8C01
03E4FA257B8A4C6C> |-
/g1 <1C60D8A8C9B74383C5AE3A59401737289D3A3BD8906761BAAED8CA63156
AA7F81E1D072D18E9E53A3F97A8269266F2EECAFC41C5B7E62D9E22C8C869800
C8AF36544138FA06FCE000435DB05B93D950FD8BBE4E1E2BE5A72127BBC725B2
13EEE3E2C86ED0F5DE8572F46C8E97E360779C0401524E6A42FE5E5421132E50
76651B29BB51C41B9500A1FD5E6DB8D7922E5F21F1B0B83F8BF911C4BA547015
5FA9BE14BF3E5A8764E4E5E82EE754160552620E146D2FEE87DDCD95C38178E1
EF2D1F38C496236C117200744EC4BF400FD6AE9345F25B9DABA08A3DB3157924
EA8D1F9FA906F0F1B17D80143A6D47C5D271046A8D55DDC7B6710D7D50373B7B
2BC3B2D11319F96BE90EBC6AB778B95B376497D9C4735D81C61094F80CFF5> |-
/g2 <1C60D8A8C9B79B8E96B146FB49F93AFCA6800AFD76BFA73464BD9EA269E
84F638B28EB7F5435132BA37261B1B11F535C95FC2BD3806941A0EF508071E41
9A17FCB18696AC295BC1EAA02D01BA9695D122A9AF57EA36C6B394DDFDEAF8A9
1608D504ADB278E10846B62C9D62550386CF05BF30D1ADA6FDD3DA930AB63414
95AF301B36AB36B34194E45A455CF68545CC52DEC490A794DE2406866366B6BF
AAB871B9B2C2E58BD08897C67E458B2E379B789A4DE3FC6101404E6573596128
282C40F83D7FF5D8DEF2F4DB34C5BA81ED825BA9F1AD2CDADB187492E63CA2BD
2> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/VSHTKN+Cmmi7 /BCAAAA+Cmmi7 findfont ct_VMDictPut
/VSHTKN+Cmmi7*1 
[/.notdef /g1 /g2 253{/.notdef}rp]
VSHTKN+Cmmi7 nf
VSHTKN+Cmmi7*1 [12.7422 0 0 -12.4 0 0 ]msf
381.794 357.846 mo
(\001\002)
[6.50027 0 ]xsh
%ADOBeginSubsetFont: MBAAAA+Cmr5 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2018 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /MBAAAA+Cmr5 def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/OrigFontType /TrueType def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /g1 put
def
/FontBBox {0 -22 625 666} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A8415741C8C01
03E4FA257B8A4C6C> |-
/g1 <1C60D8A8C9B65DE77BC31E627CA49DEBEFB986BEA2027795E383AED62B1
C3C030056F36FA14CE67467600DB01211BD57AC0F237D054963A0B8DA081819A
62A27031DA0AF6A7DBC1B38DA8C7A852189D446F60AC182C4232B5A249CE21EB
A001737B4C0F689FBD8F643FEA9A4B813FA53BE105E3F11E4EBC9B411D3FAEEB
41688D7985591BF1EEC2977F10798319BE5169543A3037A0140B2A6EA7109F5C
88F82B6F5C1368B7270C8EC8DE8F002> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/VSHTKO+Cmr5 /MBAAAA+Cmr5 findfont ct_VMDictPut
/VSHTKO+Cmr5*1 
[/.notdef /g1 254{/.notdef}rp]
VSHTKO+Cmr5 nf
VSHTKO+Cmr5*1 [9.07088 0 0 -8.9 0 0 ]msf
395.294 359.646 mo
(\001)sh
VSHTKI+Cmmi10*1 [18.2699 0 0 -17.7 0 0 ]msf
87.694 159.146 mo
(\003)sh
VSHTKJ+Cmr10*1 [18.2841 0 0 -17.7 0 0 ]msf
102.294 159.146 mo
(\001)sh
VSHTKI+Cmmi10*1 [18.2699 0 0 -17.7 0 0 ]msf
109.394 159.146 mo
(\002)sh
VSHTKM+Cmr7*1 [12.7571 0 0 -12.4 0 0 ]msf
117.794 161.646 mo
(\001)sh
VSHTKI+Cmmi10*1 [18.2699 0 0 -17.7 0 0 ]msf
126.094 159.146 mo
(\004)sh
140.094 159.146 mo
(\002)sh
VSHTKM+Cmr7*1 [12.7571 0 0 -12.4 0 0 ]msf
148.694 161.646 mo
(\002)sh
VSHTKJ+Cmr10*1 [18.2841 0 0 -17.7 0 0 ]msf
156.694 159.146 mo
(\002)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/VSHTKM+Cmr7*1 uf
/VSHTKM+Cmr7 uf
/HBAAAA+Cmr7 uf
/VSHTKO+Cmr5*1 uf
/VSHTKO+Cmr5 uf
/MBAAAA+Cmr5 uf
/VSHTKJ+Cmr10*1 uf
/VSHTKJ+Cmr10 uf
/LCAAAA+Cmr10 uf
/VSHTKN+Cmmi7*1 uf
/VSHTKN+Cmmi7 uf
/BCAAAA+Cmmi7 uf
/VSHTKL+PalatinoLinotype-Bold*1 uf
/VSHTKL+PalatinoLinotype-Bold uf
/WBAAAA+PalatinoLinotype-Bold uf
/VSHTKI+Cmmi10*1 uf
/VSHTKI+Cmmi10 uf
/FDAAAA+Cmmi10 uf
/VSHTKH+PalatinoLinotype-Roman*1 uf
/VSHTKH+PalatinoLinotype-Roman uf
/RBAAAA+PalatinoLinotype-Roman uf
/VSHTKK+Cmsy10*1 uf
/VSHTKK+Cmsy10 uf
/QCAAAA+Cmsy10 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
